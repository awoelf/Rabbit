{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _intersection from \"lodash/intersection\";\nimport _isFunction from \"lodash/isFunction\";\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport EventEmitterManager from \"./utils/EventEmitterManager\";\nvar getKeyboardsWithIDs = function getKeyboardsWithIDs(keyboardIDs) {\n  return keyboardIDs.map(function (keyboardId) {\n    return _objectSpread({\n      id: keyboardId\n    }, KeyboardRegistry.registeredKeyboards[keyboardId].params);\n  });\n};\nvar KeyboardRegistry = _createClass(function KeyboardRegistry() {\n  _classCallCheck(this, KeyboardRegistry);\n});\nKeyboardRegistry.displayName = 'KeyboardRegistry';\nKeyboardRegistry.registeredKeyboards = {};\nKeyboardRegistry.eventEmitter = new EventEmitterManager();\nKeyboardRegistry.registerKeyboard = function (componentID, generator) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!_isFunction(generator)) {\n    console.error(\"KeyboardRegistry.registerKeyboard: \" + componentID + \" you must register a generator function\");\n    return;\n  }\n  KeyboardRegistry.registeredKeyboards[componentID] = {\n    generator: generator,\n    params: params,\n    componentID: componentID\n  };\n  AppRegistry.registerComponent(componentID, generator);\n};\nKeyboardRegistry.getKeyboard = function (componentID) {\n  var res = KeyboardRegistry.registeredKeyboards[componentID];\n  if (!res || !res.generator) {\n    console.error(\"KeyboardRegistry.getKeyboard: \" + componentID + \" used but not yet registered\");\n    return undefined;\n  }\n  return res.generator();\n};\nKeyboardRegistry.getKeyboards = function () {\n  var componentIDs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var validKeyboardIDs = _intersection(componentIDs, Object.keys(KeyboardRegistry.registeredKeyboards));\n  return getKeyboardsWithIDs(validKeyboardIDs);\n};\nKeyboardRegistry.getAllKeyboards = function () {\n  return getKeyboardsWithIDs(Object.keys(KeyboardRegistry.registeredKeyboards));\n};\nKeyboardRegistry.addListener = function (globalID, callback) {\n  KeyboardRegistry.eventEmitter.listenOn(globalID, callback);\n};\nKeyboardRegistry.notifyListeners = function (globalID, args) {\n  KeyboardRegistry.eventEmitter.emitEvent(globalID, args);\n};\nKeyboardRegistry.removeListeners = function (globalID) {\n  KeyboardRegistry.eventEmitter.removeListeners(globalID);\n};\nKeyboardRegistry.onItemSelected = function (componentID, args) {\n  KeyboardRegistry.notifyListeners(componentID + \".onItemSelected\", args);\n};\nKeyboardRegistry.requestShowKeyboard = function (componentID) {\n  KeyboardRegistry.notifyListeners('onRequestShowKeyboard', {\n    keyboardId: componentID\n  });\n};\nKeyboardRegistry.toggleExpandedKeyboard = function (componentID) {\n  KeyboardRegistry.notifyListeners('onToggleExpandedKeyboard', {\n    keyboardId: componentID\n  });\n};\nexport { KeyboardRegistry as default };","map":{"version":3,"names":["_intersection","_isFunction","EventEmitterManager","getKeyboardsWithIDs","keyboardIDs","map","keyboardId","id","KeyboardRegistry","registeredKeyboards","params","displayName","eventEmitter","registerKeyboard","componentID","generator","console","error","AppRegistry","registerComponent","getKeyboard","res","undefined","getKeyboards","componentIDs","validKeyboardIDs","Object","keys","getAllKeyboards","addListener","globalID","callback","listenOn","notifyListeners","args","emitEvent","removeListeners","onItemSelected","requestShowKeyboard","toggleExpandedKeyboard"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardInput/KeyboardRegistry.js"],"sourcesContent":["import _intersection from \"lodash/intersection\";\nimport _isFunction from \"lodash/isFunction\";\nimport { AppRegistry } from 'react-native';\nimport EventEmitterManager from \"./utils/EventEmitterManager\";\n\n/*\n * Tech debt: how to deal with multiple registries in the app?\n */\n\nconst getKeyboardsWithIDs = keyboardIDs => {\n  return keyboardIDs.map(keyboardId => {\n    return {\n      id: keyboardId,\n      ...KeyboardRegistry.registeredKeyboards[keyboardId].params\n    };\n  });\n};\n\n/**\n * @description: used for registering keyboards and performing certain actions on the keyboards.\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardAccessory/demoKeyboards.js\n */\nexport default class KeyboardRegistry {\n  static displayName = 'KeyboardRegistry';\n  static registeredKeyboards = {};\n  static eventEmitter = new EventEmitterManager();\n\n  /**\n   * Register a new keyboard.\n   * componentID (string) - the ID of the keyboard.\n   * generator (function) - a function for the creation of the keyboard.\n   * params (object) - to be returned when using other methods (i.e. getKeyboards and getAllKeyboards).\n   */\n  static registerKeyboard = (componentID, generator, params = {}) => {\n    if (!_isFunction(generator)) {\n      console.error(`KeyboardRegistry.registerKeyboard: ${componentID} you must register a generator function`);\n      return;\n    }\n    KeyboardRegistry.registeredKeyboards[componentID] = {\n      generator,\n      params,\n      componentID\n    };\n    AppRegistry.registerComponent(componentID, generator);\n  };\n\n  /**\n   * Get a specific keyboard\n   * componentID (string) - the ID of the keyboard.\n   */\n  static getKeyboard = componentID => {\n    const res = KeyboardRegistry.registeredKeyboards[componentID];\n    if (!res || !res.generator) {\n      console.error(`KeyboardRegistry.getKeyboard: ${componentID} used but not yet registered`);\n      return undefined;\n    }\n    return res.generator();\n  };\n\n  /**\n   * Get keyboards by IDs\n   * componentIDs (string[]) - the ID of the keyboard.\n   */\n  static getKeyboards = (componentIDs = []) => {\n    const validKeyboardIDs = _intersection(componentIDs, Object.keys(KeyboardRegistry.registeredKeyboards));\n    return getKeyboardsWithIDs(validKeyboardIDs);\n  };\n\n  /**\n   * Get all keyboards\n   */\n  static getAllKeyboards = () => {\n    return getKeyboardsWithIDs(Object.keys(KeyboardRegistry.registeredKeyboards));\n  };\n\n  /**\n   * Add a listener for a callback.\n   * globalID (string) - ID that includes the componentID and the event name\n   *                     (i.e. if componentID='kb1' globalID='kb1.onItemSelected')\n   * callback (function) - the callback to be called when the said event happens\n   */\n  static addListener = (globalID, callback) => {\n    KeyboardRegistry.eventEmitter.listenOn(globalID, callback);\n  };\n\n  /**\n   * Notify that an event has occurred.\n   * globalID (string) - ID that includes the componentID and the event name\n   *                     (i.e. if componentID='kb1' globalID='kb1.onItemSelected')\n   * args (object) - data to be sent to the listener.\n   */\n  static notifyListeners = (globalID, args) => {\n    KeyboardRegistry.eventEmitter.emitEvent(globalID, args);\n  };\n\n  /**\n   * Remove a listener for a callback.\n   * globalID (string) - ID that includes the componentID and the event name\n   *                     (i.e. if componentID='kb1' globalID='kb1.onItemSelected')\n   */\n  static removeListeners = globalID => {\n    KeyboardRegistry.eventEmitter.removeListeners(globalID);\n  };\n\n  /**\n   * Default event to be used for when an item on the keyboard has been pressed.\n   * componentID (string) - the ID of the keyboard.\n   * args (object) - data to be sent to the listener.\n   */\n  static onItemSelected = (componentID, args) => {\n    KeyboardRegistry.notifyListeners(`${componentID}.onItemSelected`, args);\n  };\n\n  /**\n   * Request to show the keyboard\n   * componentID (string) - the ID of the keyboard.\n   */\n  static requestShowKeyboard = componentID => {\n    KeyboardRegistry.notifyListeners('onRequestShowKeyboard', {\n      keyboardId: componentID\n    });\n  };\n\n  /**\n   * @deprecated\n   * iOS only (experimental)\n   * Call to make the keyboard full screen\n   * componentID (string) - the ID of the keyboard.\n   */\n  static toggleExpandedKeyboard = componentID => {\n    KeyboardRegistry.notifyListeners('onToggleExpandedKeyboard', {\n      keyboardId: componentID\n    });\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}