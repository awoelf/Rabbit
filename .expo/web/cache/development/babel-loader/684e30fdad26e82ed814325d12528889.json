{"ast":null,"code":"import React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as ExpoClipboard from 'expo-clipboard';\nimport * as ExpoDocumentPicker from 'expo-document-picker';\nimport * as ExpoFS from 'expo-file-system';\nimport * as ExpoImagePicker from 'expo-image-picker';\nimport * as ExpoMediaLibrary from 'expo-media-library';\nimport * as ExpoNotifications from 'expo-notifications';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createExpoClipboardService, createExpoFileService, createExpoNotificationService, SendbirdUIKitContainer, useSendbirdChat, onCreateChannel } from '@sendbird/uikit-react-native';\nimport Channel from \"../screens/Message/Channel\";\nimport ChannelList from \"../screens/Message/ChannelList\";\nimport CreateChannel from \"../screens/Message/CreateChannel\";\nimport SignIn from \"../screens/Message/SignIn\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NotificationService = createExpoNotificationService(ExpoNotifications);\nvar ClipboardService = createExpoClipboardService(ExpoClipboard);\nvar FileService = createExpoFileService({\n  fsModule: ExpoFS,\n  imagePickerModule: ExpoImagePicker,\n  mediaLibraryModule: ExpoMediaLibrary,\n  documentPickerModule: ExpoDocumentPicker\n});\nvar Stack = createNativeStackNavigator();\nfunction MessageStack() {\n  var _useSendbirdChat = useSendbirdChat(),\n    currentUser = _useSendbirdChat.currentUser;\n  return _jsx(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: !currentUser ? _jsx(Stack.Screen, {\n      name: 'SignIn',\n      component: SignIn\n    }) : _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: 'ChannelList',\n        component: ChannelList\n      }), _jsx(Stack.Screen, {\n        name: 'CreateChannel',\n        component: CreateChannel\n      }), _jsx(Stack.Screen, {\n        name: 'Channel',\n        component: Channel\n      })]\n    })\n  });\n}\nexport default function MessageNavigator() {\n  return _jsx(SendbirdUIKitContainer, {\n    appId: '6CD12A00-3AA4-4F84-A4CB-C202BA86B06A',\n    chatOptions: {\n      localCacheStorage: AsyncStorage\n    },\n    userProfile: {\n      onCreateChannel: function onCreateChannel(channel) {\n        if (channel.isGroupChannel()) {\n          navigationActions.push(Routes.GroupChannel, {\n            channelUrl: channel.url\n          });\n        }\n      }\n    },\n    platformServices: {\n      file: FileService,\n      notification: NotificationService,\n      clipboard: ClipboardService\n    },\n    children: _jsx(MessageStack, {})\n  });\n}","map":{"version":3,"names":["React","createNativeStackNavigator","ExpoClipboard","ExpoDocumentPicker","ExpoFS","ExpoImagePicker","ExpoMediaLibrary","ExpoNotifications","AsyncStorage","createExpoClipboardService","createExpoFileService","createExpoNotificationService","SendbirdUIKitContainer","useSendbirdChat","onCreateChannel","Channel","ChannelList","CreateChannel","SignIn","NotificationService","ClipboardService","FileService","fsModule","imagePickerModule","mediaLibraryModule","documentPickerModule","Stack","MessageStack","currentUser","headerShown","MessageNavigator","localCacheStorage","channel","isGroupChannel","navigationActions","push","Routes","GroupChannel","channelUrl","url","file","notification","clipboard"],"sources":["C:/Users/Alex/Documents/development/Rabbit/src/navigation/MessageNavigator.js"],"sourcesContent":["import React from 'react';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\n\r\nimport * as ExpoClipboard from 'expo-clipboard';\r\nimport * as ExpoDocumentPicker from 'expo-document-picker';\r\nimport * as ExpoFS from 'expo-file-system';\r\nimport * as ExpoImagePicker from 'expo-image-picker';\r\nimport * as ExpoMediaLibrary from 'expo-media-library';\r\nimport * as ExpoNotifications from 'expo-notifications';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport {\r\n  createExpoClipboardService,\r\n  createExpoFileService,\r\n  createExpoNotificationService,\r\n  SendbirdUIKitContainer,\r\n  useSendbirdChat,\r\n  onCreateChannel\r\n} from '@sendbird/uikit-react-native';\r\n\r\n// import screens here\r\nimport Channel from '../screens/Message/Channel';\r\nimport ChannelList from '../screens/Message/ChannelList';\r\nimport CreateChannel from '../screens/Message/CreateChannel';\r\nimport SignIn from '../screens/Message/SignIn';\r\n\r\nconst NotificationService = createExpoNotificationService(ExpoNotifications);\r\nconst ClipboardService = createExpoClipboardService(ExpoClipboard);\r\nconst FileService = createExpoFileService({\r\n  fsModule: ExpoFS,\r\n  imagePickerModule: ExpoImagePicker,\r\n  mediaLibraryModule: ExpoMediaLibrary,\r\n  documentPickerModule: ExpoDocumentPicker,\r\n});\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nfunction MessageStack() {\r\n  const { currentUser } = useSendbirdChat();\r\n\r\n  return (\r\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n      {!currentUser ? (\r\n        <Stack.Screen name={'SignIn'} component={SignIn} />\r\n      ) : (\r\n        <>\r\n          <Stack.Screen name={'ChannelList'} component={ChannelList} />\r\n          <Stack.Screen name={'CreateChannel'} component={CreateChannel} />\r\n          <Stack.Screen name={'Channel'} component={Channel} />\r\n        </>\r\n      )}\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\nexport default function MessageNavigator() {\r\n  return (\r\n    <SendbirdUIKitContainer\r\n      appId={'6CD12A00-3AA4-4F84-A4CB-C202BA86B06A'}\r\n      chatOptions={{ localCacheStorage: AsyncStorage }}\r\n      userProfile={{\r\n        onCreateChannel: (channel) => {\r\n          if (channel.isGroupChannel()) {\r\n            navigationActions.push(Routes.GroupChannel, { channelUrl: channel.url });\r\n          }\r\n        },\r\n      }}\r\n      platformServices={{\r\n        file: FileService,\r\n        notification: NotificationService,\r\n        clipboard: ClipboardService,\r\n      }}\r\n    >\r\n      <MessageStack />\r\n    </SendbirdUIKitContainer>\r\n  );\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,0BAA0B,QAAQ,gCAAgC;AAE3E,OAAO,KAAKC,aAAa,MAAM,gBAAgB;AAC/C,OAAO,KAAKC,kBAAkB,MAAM,sBAAsB;AAC1D,OAAO,KAAKC,MAAM,MAAM,kBAAkB;AAC1C,OAAO,KAAKC,eAAe,MAAM,mBAAmB;AACpD,OAAO,KAAKC,gBAAgB,MAAM,oBAAoB;AACtD,OAAO,KAAKC,iBAAiB,MAAM,oBAAoB;AACvD,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,SACEC,0BAA0B,EAC1BC,qBAAqB,EACrBC,6BAA6B,EAC7BC,sBAAsB,EACtBC,eAAe,EACfC,eAAe,QACV,8BAA8B;AAGrC,OAAOC,OAAO;AACd,OAAOC,WAAW;AAClB,OAAOC,aAAa;AACpB,OAAOC,MAAM;AAAkC;AAAA;AAAA;AAE/C,IAAMC,mBAAmB,GAAGR,6BAA6B,CAACJ,iBAAiB,CAAC;AAC5E,IAAMa,gBAAgB,GAAGX,0BAA0B,CAACP,aAAa,CAAC;AAClE,IAAMmB,WAAW,GAAGX,qBAAqB,CAAC;EACxCY,QAAQ,EAAElB,MAAM;EAChBmB,iBAAiB,EAAElB,eAAe;EAClCmB,kBAAkB,EAAElB,gBAAgB;EACpCmB,oBAAoB,EAAEtB;AACxB,CAAC,CAAC;AAEF,IAAMuB,KAAK,GAAGzB,0BAA0B,EAAE;AAE1C,SAAS0B,YAAY,GAAG;EACtB,uBAAwBd,eAAe,EAAE;IAAjCe,WAAW,oBAAXA,WAAW;EAEnB,OACE,KAAC,KAAK,CAAC,SAAS;IAAC,aAAa,EAAE;MAAEC,WAAW,EAAE;IAAM,CAAE;IAAA,UACpD,CAACD,WAAW,GACX,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAE,QAAS;MAAC,SAAS,EAAEV;IAAO,EAAG,GAEnD;MAAA,WACE,KAAC,KAAK,CAAC,MAAM;QAAC,IAAI,EAAE,aAAc;QAAC,SAAS,EAAEF;MAAY,EAAG,EAC7D,KAAC,KAAK,CAAC,MAAM;QAAC,IAAI,EAAE,eAAgB;QAAC,SAAS,EAAEC;MAAc,EAAG,EACjE,KAAC,KAAK,CAAC,MAAM;QAAC,IAAI,EAAE,SAAU;QAAC,SAAS,EAAEF;MAAQ,EAAG;IAAA;EAExD,EACe;AAEtB;AAEA,eAAe,SAASe,gBAAgB,GAAG;EACzC,OACE,KAAC,sBAAsB;IACrB,KAAK,EAAE,sCAAuC;IAC9C,WAAW,EAAE;MAAEC,iBAAiB,EAAEvB;IAAa,CAAE;IACjD,WAAW,EAAE;MACXM,eAAe,EAAE,yBAACkB,OAAO,EAAK;QAC5B,IAAIA,OAAO,CAACC,cAAc,EAAE,EAAE;UAC5BC,iBAAiB,CAACC,IAAI,CAACC,MAAM,CAACC,YAAY,EAAE;YAAEC,UAAU,EAAEN,OAAO,CAACO;UAAI,CAAC,CAAC;QAC1E;MACF;IACF,CAAE;IACF,gBAAgB,EAAE;MAChBC,IAAI,EAAEnB,WAAW;MACjBoB,YAAY,EAAEtB,mBAAmB;MACjCuB,SAAS,EAAEtB;IACb,CAAE;IAAA,UAEF,KAAC,YAAY;EAAG,EACO;AAE7B"},"metadata":{},"sourceType":"module"}