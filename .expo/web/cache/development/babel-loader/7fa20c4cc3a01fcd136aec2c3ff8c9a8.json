{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { AsyncStoragePackage } from \"../optionalDependencies\";\nvar isAsyncStorageInstalled = !!AsyncStoragePackage;\nvar validateAsyncStorage = function validateAsyncStorage(method) {\n  if (isAsyncStorageInstalled) {\n    return true;\n  } else {\n    console.error(\"RNUILib requires installing \\\"@react-native-community/async-storage\\\" dependency to use \" + method + \"LocalScheme\");\n    return false;\n  }\n};\nvar Config = function () {\n  function Config() {\n    _classCallCheck(this, Config);\n    this.appScheme = 'light';\n    this.setConfig({});\n  }\n  _createClass(Config, [{\n    key: \"setConfig\",\n    value: function () {\n      var _setConfig = _asyncToGenerator(function* (options) {\n        var _options$usePlatformC = options.usePlatformColors,\n          usePlatformColors = _options$usePlatformC === void 0 ? false : _options$usePlatformC,\n          _options$appScheme = options.appScheme,\n          appScheme = _options$appScheme === void 0 ? 'light' : _options$appScheme,\n          _options$useLocalSche = options.useLocalScheme,\n          useLocalScheme = _options$useLocalSche === void 0 ? false : _options$useLocalSche;\n        this.usePlatformColors = usePlatformColors;\n        if (isAsyncStorageInstalled && useLocalScheme) {\n          var _this$getLocalScheme;\n          this.appScheme = (yield (_this$getLocalScheme = this.getLocalScheme) == null ? void 0 : _this$getLocalScheme.call(this)) || appScheme;\n        } else {\n          this.appScheme = appScheme;\n        }\n      });\n      function setConfig(_x) {\n        return _setConfig.apply(this, arguments);\n      }\n      return setConfig;\n    }()\n  }, {\n    key: \"setLocalScheme\",\n    value: function () {\n      var _setLocalScheme = _asyncToGenerator(function* (scheme) {\n        if (validateAsyncStorage('set')) {\n          yield AsyncStoragePackage.setItem == null ? void 0 : AsyncStoragePackage.setItem('rnuilib.appScheme', scheme);\n        }\n      });\n      function setLocalScheme(_x2) {\n        return _setLocalScheme.apply(this, arguments);\n      }\n      return setLocalScheme;\n    }()\n  }, {\n    key: \"getLocalScheme\",\n    value: function () {\n      var _getLocalScheme = _asyncToGenerator(function* () {\n        if (validateAsyncStorage('get')) {\n          return yield AsyncStoragePackage.getItem == null ? void 0 : AsyncStoragePackage.getItem('rnuilib.appScheme');\n        }\n      });\n      function getLocalScheme() {\n        return _getLocalScheme.apply(this, arguments);\n      }\n      return getLocalScheme;\n    }()\n  }]);\n  return Config;\n}();\nexport default new Config();","map":{"version":3,"names":["AsyncStoragePackage","isAsyncStorageInstalled","validateAsyncStorage","method","console","error","Config","appScheme","setConfig","options","usePlatformColors","useLocalScheme","getLocalScheme","scheme","setItem","getItem"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/commons/Config.js"],"sourcesContent":["import { AsyncStoragePackage } from \"../optionalDependencies\";\nconst isAsyncStorageInstalled = !!AsyncStoragePackage;\nconst validateAsyncStorage = method => {\n  if (isAsyncStorageInstalled) {\n    return true;\n  } else {\n    console.error(`RNUILib requires installing \"@react-native-community/async-storage\" dependency to use ${method}LocalScheme`);\n    return false;\n  }\n};\nclass Config {\n  appScheme = 'light';\n  constructor() {\n    this.setConfig({});\n  }\n  async setConfig(options) {\n    const {\n      usePlatformColors = false,\n      appScheme = 'light',\n      useLocalScheme = false\n    } = options;\n    this.usePlatformColors = usePlatformColors;\n    if (isAsyncStorageInstalled && useLocalScheme) {\n      this.appScheme = (await this.getLocalScheme?.()) || appScheme;\n    } else {\n      this.appScheme = appScheme;\n    }\n  }\n  async setLocalScheme(scheme) {\n    if (validateAsyncStorage('set')) {\n      await AsyncStoragePackage.setItem?.('rnuilib.appScheme', scheme);\n    }\n  }\n  async getLocalScheme() {\n    if (validateAsyncStorage('get')) {\n      return await AsyncStoragePackage.getItem?.('rnuilib.appScheme');\n    }\n  }\n}\nexport default new Config();"],"mappings":";;;AAAA,SAASA,mBAAmB;AAC5B,IAAMC,uBAAuB,GAAG,CAAC,CAACD,mBAAmB;AACrD,IAAME,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAGC,MAAM,EAAI;EACrC,IAAIF,uBAAuB,EAAE;IAC3B,OAAO,IAAI;EACb,CAAC,MAAM;IACLG,OAAO,CAACC,KAAK,8FAA0FF,MAAM,iBAAc;IAC3H,OAAO,KAAK;EACd;AACF,CAAC;AAAC,IACIG,MAAM;EAEV,kBAAc;IAAA;IAAA,KADdC,SAAS,GAAG,OAAO;IAEjB,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;EACpB;EAAC;IAAA;IAAA;MAAA,mCACD,WAAgBC,OAAO,EAAE;QACvB,4BAIIA,OAAO,CAHTC,iBAAiB;UAAjBA,iBAAiB,sCAAG,KAAK;UAAA,qBAGvBD,OAAO,CAFTF,SAAS;UAATA,SAAS,mCAAG,OAAO;UAAA,wBAEjBE,OAAO,CADTE,cAAc;UAAdA,cAAc,sCAAG,KAAK;QAExB,IAAI,CAACD,iBAAiB,GAAGA,iBAAiB;QAC1C,IAAIT,uBAAuB,IAAIU,cAAc,EAAE;UAAA;UAC7C,IAAI,CAACJ,SAAS,GAAG,+BAAO,IAAI,CAACK,cAAc,qBAAnB,8BAAI,CAAmB,KAAKL,SAAS;QAC/D,CAAC,MAAM;UACL,IAAI,CAACA,SAAS,GAAGA,SAAS;QAC5B;MACF,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,wCACD,WAAqBM,MAAM,EAAE;QAC3B,IAAIX,oBAAoB,CAAC,KAAK,CAAC,EAAE;UAC/B,MAAMF,mBAAmB,CAACc,OAAO,oBAA3Bd,mBAAmB,CAACc,OAAO,CAAG,mBAAmB,EAAED,MAAM,CAAC;QAClE;MACF,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,wCACD,aAAuB;QACrB,IAAIX,oBAAoB,CAAC,KAAK,CAAC,EAAE;UAC/B,aAAaF,mBAAmB,CAACe,OAAO,oBAA3Bf,mBAAmB,CAACe,OAAO,CAAG,mBAAmB,CAAC;QACjE;MACF,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAEH,eAAe,IAAIT,MAAM,EAAE"},"metadata":{},"sourceType":"module"}