{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { useFonts, Mukta_400Regular, CreteRound_400Regular } from '@expo-google-fonts/dev';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport Main from \"./src/navigation/Main\";\nimport Header from \"./Shared/Header\";\nimport { Provider } from 'react-redux';\nimport store from \"./src/utils/store\";\nimport rabbitTheme from \"./src/styles/theme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar httpLink = createHttpLink({\n  uri: 'https://rabbit-app.herokuapp.com/graphql'\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  var token = AsyncStorage.getItem('id_token');\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? \"Bearer \" + token : ''\n    })\n  };\n});\nvar client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nexport default function App() {\n  var _useFonts = useFonts({\n      Mukta_400Regular: Mukta_400Regular,\n      CreteRound_400Regular: CreteRound_400Regular\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(ApolloProvider, {\n    client: client,\n    children: _jsx(Provider, {\n      store: store,\n      children: _jsx(NavigationContainer, {\n        theme: rabbitTheme,\n        children: _jsx(Main, {})\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","useFonts","Mukta_400Regular","CreteRound_400Regular","AsyncStorage","NavigationContainer","Main","Header","Provider","store","rabbitTheme","httpLink","uri","authLink","_","headers","token","getItem","authorization","client","link","concat","cache","App","fontsLoaded"],"sources":["C:/Users/Alex/Documents/development/Rabbit/App.js"],"sourcesContent":["import React from 'react';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { useFonts, Mukta_400Regular, CreteRound_400Regular } from '@expo-google-fonts/dev';\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport { NavigationContainer } from '@react-navigation/native';\r\n\r\n//Navigators\r\nimport Main from './src/navigation/Main';\r\n\r\n// Screens\r\nimport Header from './Shared/Header';\r\n\r\n//Redux\r\nimport { Provider } from 'react-redux';\r\nimport store from './src/utils/store';\r\n\r\n// Theme\r\nimport rabbitTheme from './src/styles/theme';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'https://rabbit-app.herokuapp.com/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = AsyncStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default function App() {\r\n  let [fontsLoaded] = useFonts({\r\n    Mukta_400Regular,\r\n    CreteRound_400Regular,\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Provider store={store}>\r\n        <NavigationContainer theme={rabbitTheme}>\r\n          <Main />\r\n        </NavigationContainer>\r\n      </Provider>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,cAAc,QAAQ,gBAAgB;AAC5F,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,QAAQ,EAAEC,gBAAgB,EAAEC,qBAAqB,QAAQ,wBAAwB;AAE1F,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,SAASC,mBAAmB,QAAQ,0BAA0B;AAG9D,OAAOC,IAAI;AAGX,OAAOC,MAAM;AAGb,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK;AAGZ,OAAOC,WAAW;AAA2B;AAE7C,IAAMC,QAAQ,GAAGZ,cAAc,CAAC;EAC9Ba,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,IAAMC,QAAQ,GAAGb,UAAU,CAAC,UAACc,CAAC,QAAkB;EAAA,IAAdC,OAAO,QAAPA,OAAO;EACvC,IAAMC,KAAK,GAAGZ,YAAY,CAACa,OAAO,CAAC,UAAU,CAAC;EAC9C,OAAO;IACLF,OAAO,kCACFA,OAAO;MACVG,aAAa,EAAEF,KAAK,eAAaA,KAAK,GAAK;IAAE;EAEjD,CAAC;AACH,CAAC,CAAC;AAEF,IAAMG,MAAM,GAAG,IAAIvB,YAAY,CAAC;EAC9BwB,IAAI,EAAEP,QAAQ,CAACQ,MAAM,CAACV,QAAQ,CAAC;EAC/BW,KAAK,EAAE,IAAIzB,aAAa;AAC1B,CAAC,CAAC;AAEF,eAAe,SAAS0B,GAAG,GAAG;EAC5B,gBAAoBtB,QAAQ,CAAC;MAC3BC,gBAAgB,EAAhBA,gBAAgB;MAChBC,qBAAqB,EAArBA;IACF,CAAC,CAAC;IAAA;IAHGqB,WAAW;EAKhB,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EAEA,OACE,KAAC,cAAc;IAAC,MAAM,EAAEL,MAAO;IAAA,UAC7B,KAAC,QAAQ;MAAC,KAAK,EAAEV,KAAM;MAAA,UACrB,KAAC,mBAAmB;QAAC,KAAK,EAAEC,WAAY;QAAA,UACtC,KAAC,IAAI;MAAG;IACY;EACb,EACI;AAErB"},"metadata":{},"sourceType":"module"}