{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"renderItem\", \"onOrderChange\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _mapKeys from \"lodash/mapKeys\";\nimport _map from \"lodash/map\";\nimport React, { useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { useDidUpdate } from \"../../hooks\";\nimport SortableItem from \"./SortableItem\";\nimport usePresenter from \"./usePresenter\";\nimport { SortableGridListProps } from \"./types\";\nimport useGridLayout, { DEFAULT_ITEM_SPACINGS, DEFAULT_NUM_COLUMNS } from \"../gridList/useGridLayout\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction generateItemsOrder(data) {\n  return _map(data, function (item) {\n    return item.id;\n  });\n}\nfunction SortableGridList(props) {\n  var renderItem = props.renderItem,\n    onOrderChange = props.onOrderChange,\n    others = _objectWithoutProperties(props, _excluded);\n  var _useGridLayout = useGridLayout(props),\n    itemContainerStyle = _useGridLayout.itemContainerStyle,\n    numberOfColumns = _useGridLayout.numberOfColumns,\n    listContentStyle = _useGridLayout.listContentStyle;\n  var _others$numColumns = others.numColumns,\n    numColumns = _others$numColumns === void 0 ? DEFAULT_NUM_COLUMNS : _others$numColumns,\n    _others$itemSpacing = others.itemSpacing,\n    itemSpacing = _others$itemSpacing === void 0 ? DEFAULT_ITEM_SPACINGS : _others$itemSpacing,\n    data = others.data;\n  var itemsOrder = useSharedValue(generateItemsOrder(data));\n  useDidUpdate(function () {\n    itemsOrder.value = generateItemsOrder(data);\n  }, [data]);\n  var presenter = usePresenter(numColumns, itemSpacing);\n  var onChange = useCallback(function () {\n    var newData = [];\n    var dataByIds = _mapKeys(data, 'id');\n    if (data != null && data.length) {\n      itemsOrder.value.forEach(function (itemId) {\n        newData.push(dataByIds[itemId]);\n      });\n    }\n    onOrderChange == null ? void 0 : onOrderChange(newData, itemsOrder.value);\n  }, [onOrderChange, data]);\n  var _renderItem = useCallback(function (_ref) {\n    var item = _ref.item,\n      index = _ref.index;\n    var lastItemInRow = (index + 1) % numberOfColumns === 0;\n    return _jsx(SortableItem, _objectSpread(_objectSpread({\n      data: data\n    }, presenter), {}, {\n      style: [itemContainerStyle, lastItemInRow && {\n        marginRight: 0\n      }],\n      itemsOrder: itemsOrder,\n      id: item.id,\n      onChange: onChange,\n      children: renderItem({\n        item: item,\n        index: index\n      })\n    }), item.id);\n  }, [data]);\n  return _jsx(GestureHandlerRootView, {\n    children: _jsx(ScrollView, {\n      contentContainerStyle: [styles.listContent, listContentStyle],\n      children: data == null ? void 0 : data.map(function (item, index) {\n        return _renderItem({\n          item: item,\n          index: index\n        });\n      })\n    })\n  });\n}\nexport { SortableGridListProps };\nexport default SortableGridList;\nvar styles = StyleSheet.create({\n  listContent: {\n    flexWrap: 'wrap',\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"names":["_mapKeys","_map","React","useCallback","GestureHandlerRootView","useSharedValue","useDidUpdate","SortableItem","usePresenter","SortableGridListProps","useGridLayout","DEFAULT_ITEM_SPACINGS","DEFAULT_NUM_COLUMNS","generateItemsOrder","data","item","id","SortableGridList","props","renderItem","onOrderChange","others","itemContainerStyle","numberOfColumns","listContentStyle","numColumns","itemSpacing","itemsOrder","value","presenter","onChange","newData","dataByIds","length","forEach","itemId","push","_renderItem","index","lastItemInRow","marginRight","styles","listContent","map","StyleSheet","create","flexWrap","flexDirection"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/components/sortableGridList/index.js"],"sourcesContent":["import _mapKeys from \"lodash/mapKeys\";\nimport _map from \"lodash/map\";\nimport React, { useCallback } from 'react';\nimport { StyleSheet, ScrollView } from 'react-native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { useDidUpdate } from \"../../hooks\";\nimport SortableItem from \"./SortableItem\";\nimport usePresenter from \"./usePresenter\";\nimport { SortableGridListProps } from \"./types\";\nimport useGridLayout, { DEFAULT_ITEM_SPACINGS, DEFAULT_NUM_COLUMNS } from \"../gridList/useGridLayout\";\nfunction generateItemsOrder(data) {\n  return _map(data, item => item.id);\n}\nfunction SortableGridList(props) {\n  const {\n    renderItem,\n    onOrderChange,\n    ...others\n  } = props;\n  const {\n    itemContainerStyle,\n    numberOfColumns,\n    listContentStyle\n  } = useGridLayout(props);\n  const {\n    numColumns = DEFAULT_NUM_COLUMNS,\n    itemSpacing = DEFAULT_ITEM_SPACINGS,\n    data\n  } = others;\n  const itemsOrder = useSharedValue(generateItemsOrder(data));\n  useDidUpdate(() => {\n    itemsOrder.value = generateItemsOrder(data);\n  }, [data]);\n\n  // TODO: Get the number of columns from GridList calculation somehow\n  const presenter = usePresenter(numColumns, itemSpacing);\n  const onChange = useCallback(() => {\n    const newData = [];\n    const dataByIds = _mapKeys(data, 'id');\n    if (data?.length) {\n      itemsOrder.value.forEach(itemId => {\n        newData.push(dataByIds[itemId]);\n      });\n    }\n    onOrderChange?.(newData, itemsOrder.value);\n  }, [onOrderChange, data]);\n  const _renderItem = useCallback(({\n    item,\n    index\n  }) => {\n    const lastItemInRow = (index + 1) % numberOfColumns === 0;\n    return <SortableItem key={item.id} data={data} {...presenter} style={[itemContainerStyle, lastItemInRow && {\n      marginRight: 0\n    }]} itemsOrder={itemsOrder} id={item.id} onChange={onChange}>\n        {/* @ts-expect-error */}\n        {renderItem({\n        item,\n        index\n      })}\n      </SortableItem>;\n  }, [data]);\n  return <GestureHandlerRootView>\n      <ScrollView contentContainerStyle={[styles.listContent, listContentStyle]}>\n        {data?.map((item, index) => _renderItem({\n        item,\n        index\n      }))}\n      </ScrollView>\n    </GestureHandlerRootView>;\n}\nexport { SortableGridListProps };\nexport default SortableGridList;\nconst styles = StyleSheet.create({\n  listContent: {\n    flexWrap: 'wrap',\n    flexDirection: 'row'\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}