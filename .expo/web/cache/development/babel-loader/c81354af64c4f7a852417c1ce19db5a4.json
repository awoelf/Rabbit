{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nexport var EMPTY = {\n  type: 'empty'\n};\nfunction formatNumber(value, options) {\n  return value.toLocaleString(options.localeOptions.locale, {\n    maximumFractionDigits: options.fractionDigits\n  });\n}\nfunction generateLocaleOptions(locale) {\n  var options = {\n    localeOptions: {\n      locale: locale,\n      decimalSeparator: '',\n      thousandSeparator: ''\n    },\n    fractionDigits: 1\n  };\n  var decimalSeparator = formatNumber(1.1, options).replace(/1/g, '');\n  var thousandSeparator = formatNumber(1111, options).replace(/1/g, '');\n  return {\n    locale: locale,\n    decimalSeparator: decimalSeparator,\n    thousandSeparator: thousandSeparator\n  };\n}\nexport function generateOptions(locale, fractionDigits) {\n  return {\n    localeOptions: generateLocaleOptions(locale),\n    fractionDigits: fractionDigits\n  };\n}\nexport function parseInput(text, options) {\n  if (_isEmpty(text)) {\n    return EMPTY;\n  }\n  var cleanInput = text.replaceAll(options.localeOptions.thousandSeparator, '');\n  cleanInput = cleanInput.replaceAll(options.localeOptions.decimalSeparator, '.');\n  var number = Number(cleanInput);\n  if (isNaN(number)) {\n    return {\n      type: 'error',\n      userInput: text\n    };\n  }\n  number = Number(number.toFixed(options.fractionDigits));\n  var formattedNumber = formatNumber(number, options);\n  return {\n    type: 'valid',\n    userInput: text,\n    number: number,\n    formattedNumber: formattedNumber\n  };\n}\nexport function getInitialData(options, initialValue) {\n  if (initialValue === undefined) {\n    return EMPTY;\n  }\n  return parseInput(formatNumber(initialValue, options), options);\n}","map":{"version":3,"names":["_isEmpty","EMPTY","type","formatNumber","value","options","toLocaleString","localeOptions","locale","maximumFractionDigits","fractionDigits","generateLocaleOptions","decimalSeparator","thousandSeparator","replace","generateOptions","parseInput","text","cleanInput","replaceAll","number","Number","isNaN","userInput","toFixed","formattedNumber","getInitialData","initialValue","undefined"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/components/numberInput/Presenter.js"],"sourcesContent":["import _isEmpty from \"lodash/isEmpty\";\nexport const EMPTY = {\n  type: 'empty'\n};\nfunction formatNumber(value, options) {\n  return value.toLocaleString(options.localeOptions.locale, {\n    maximumFractionDigits: options.fractionDigits\n  });\n}\nfunction generateLocaleOptions(locale) {\n  const options = {\n    localeOptions: {\n      locale,\n      decimalSeparator: '',\n      // fake decimalSeparator, we're creating it now\n      thousandSeparator: '' // fake thousandSeparator, we're creating it now\n    },\n\n    fractionDigits: 1\n  };\n  const decimalSeparator = formatNumber(1.1, options).replace(/1/g, '');\n  const thousandSeparator = formatNumber(1111, options).replace(/1/g, '');\n  return {\n    locale,\n    decimalSeparator,\n    thousandSeparator\n  };\n}\nexport function generateOptions(locale, fractionDigits) {\n  return {\n    localeOptions: generateLocaleOptions(locale),\n    fractionDigits\n  };\n}\nexport function parseInput(text, options) {\n  if (_isEmpty(text)) {\n    return EMPTY;\n  }\n  let cleanInput = text.replaceAll(options.localeOptions.thousandSeparator, '');\n  cleanInput = cleanInput.replaceAll(options.localeOptions.decimalSeparator, '.');\n  let number = Number(cleanInput);\n  if (isNaN(number)) {\n    return {\n      type: 'error',\n      userInput: text\n    };\n  }\n  number = Number(number.toFixed(options.fractionDigits));\n  const formattedNumber = formatNumber(number, options);\n  return {\n    type: 'valid',\n    userInput: text,\n    number,\n    formattedNumber\n  };\n}\nexport function getInitialData(options, initialValue) {\n  if (initialValue === undefined) {\n    return EMPTY;\n  }\n  return parseInput(formatNumber(initialValue, options), options);\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,gBAAgB;AACrC,OAAO,IAAMC,KAAK,GAAG;EACnBC,IAAI,EAAE;AACR,CAAC;AACD,SAASC,YAAY,CAACC,KAAK,EAAEC,OAAO,EAAE;EACpC,OAAOD,KAAK,CAACE,cAAc,CAACD,OAAO,CAACE,aAAa,CAACC,MAAM,EAAE;IACxDC,qBAAqB,EAAEJ,OAAO,CAACK;EACjC,CAAC,CAAC;AACJ;AACA,SAASC,qBAAqB,CAACH,MAAM,EAAE;EACrC,IAAMH,OAAO,GAAG;IACdE,aAAa,EAAE;MACbC,MAAM,EAANA,MAAM;MACNI,gBAAgB,EAAE,EAAE;MAEpBC,iBAAiB,EAAE;IACrB,CAAC;IAEDH,cAAc,EAAE;EAClB,CAAC;EACD,IAAME,gBAAgB,GAAGT,YAAY,CAAC,GAAG,EAAEE,OAAO,CAAC,CAACS,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EACrE,IAAMD,iBAAiB,GAAGV,YAAY,CAAC,IAAI,EAAEE,OAAO,CAAC,CAACS,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EACvE,OAAO;IACLN,MAAM,EAANA,MAAM;IACNI,gBAAgB,EAAhBA,gBAAgB;IAChBC,iBAAiB,EAAjBA;EACF,CAAC;AACH;AACA,OAAO,SAASE,eAAe,CAACP,MAAM,EAAEE,cAAc,EAAE;EACtD,OAAO;IACLH,aAAa,EAAEI,qBAAqB,CAACH,MAAM,CAAC;IAC5CE,cAAc,EAAdA;EACF,CAAC;AACH;AACA,OAAO,SAASM,UAAU,CAACC,IAAI,EAAEZ,OAAO,EAAE;EACxC,IAAIL,QAAQ,CAACiB,IAAI,CAAC,EAAE;IAClB,OAAOhB,KAAK;EACd;EACA,IAAIiB,UAAU,GAAGD,IAAI,CAACE,UAAU,CAACd,OAAO,CAACE,aAAa,CAACM,iBAAiB,EAAE,EAAE,CAAC;EAC7EK,UAAU,GAAGA,UAAU,CAACC,UAAU,CAACd,OAAO,CAACE,aAAa,CAACK,gBAAgB,EAAE,GAAG,CAAC;EAC/E,IAAIQ,MAAM,GAAGC,MAAM,CAACH,UAAU,CAAC;EAC/B,IAAII,KAAK,CAACF,MAAM,CAAC,EAAE;IACjB,OAAO;MACLlB,IAAI,EAAE,OAAO;MACbqB,SAAS,EAAEN;IACb,CAAC;EACH;EACAG,MAAM,GAAGC,MAAM,CAACD,MAAM,CAACI,OAAO,CAACnB,OAAO,CAACK,cAAc,CAAC,CAAC;EACvD,IAAMe,eAAe,GAAGtB,YAAY,CAACiB,MAAM,EAAEf,OAAO,CAAC;EACrD,OAAO;IACLH,IAAI,EAAE,OAAO;IACbqB,SAAS,EAAEN,IAAI;IACfG,MAAM,EAANA,MAAM;IACNK,eAAe,EAAfA;EACF,CAAC;AACH;AACA,OAAO,SAASC,cAAc,CAACrB,OAAO,EAAEsB,YAAY,EAAE;EACpD,IAAIA,YAAY,KAAKC,SAAS,EAAE;IAC9B,OAAO3B,KAAK;EACd;EACA,OAAOe,UAAU,CAACb,YAAY,CAACwB,YAAY,EAAEtB,OAAO,CAAC,EAAEA,OAAO,CAAC;AACjE"},"metadata":{},"sourceType":"module"}