{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nexport var orientations;\n(function (orientations) {\n  orientations[\"PORTRAIT\"] = \"portrait\";\n  orientations[\"LANDSCAPE\"] = \"landscape\";\n})(orientations || (orientations = {}));\nvar isAndroid = Platform.OS === 'android';\nvar isIOS = Platform.OS === 'ios';\nvar isWeb = Platform.OS === 'web';\nvar isTablet;\nvar statusBarHeight;\nvar screenHeight = Dimensions.get('screen').height;\nvar screenWidth = Dimensions.get('screen').width;\nvar windowHeight = Dimensions.get('window').height;\nvar windowWidth = Dimensions.get('window').width;\nisTablet = Platform.isPad || getAspectRatio() < 1.6 && Math.max(screenWidth, screenHeight) >= 900;\nfunction setStatusBarHeight() {\n  var StatusBarManager = NativeModules.StatusBarManager;\n  statusBarHeight = (StatusBarManager == null ? void 0 : StatusBarManager.HEIGHT) || 0;\n}\nfunction getAspectRatio() {\n  return screenWidth < screenHeight ? screenHeight / screenWidth : screenWidth / screenHeight;\n}\nfunction getOrientation(height, width) {\n  return width < height ? orientations.PORTRAIT : orientations.LANDSCAPE;\n}\nexport function updateConstants(dimensions) {\n  screenHeight = dimensions.screen.height;\n  screenWidth = dimensions.screen.width;\n  windowWidth = dimensions.window.width;\n  windowHeight = dimensions.window.height;\n  setStatusBarHeight();\n}\nvar accessibility = {\n  isScreenReaderEnabled: false\n};\nfunction handleScreenReaderChanged(isScreenReaderEnabled) {\n  accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n}\nAccessibilityInfo.addEventListener('screenReaderChanged', handleScreenReaderChanged);\nfunction setAccessibility() {\n  AccessibilityInfo.isScreenReaderEnabled().then(function (isScreenReaderEnabled) {\n    accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n  });\n}\nsetAccessibility();\nvar constants = {\n  orientations: orientations,\n  isAndroid: isAndroid,\n  isIOS: isIOS,\n  isWeb: isWeb,\n  getAndroidVersion: function getAndroidVersion() {\n    return isAndroid ? parseInt(Platform.Version, 10) : undefined;\n  },\n  get statusBarHeight() {\n    return statusBarHeight;\n  },\n  isRTL: I18nManager.isRTL,\n  get orientation() {\n    return getOrientation(windowHeight, windowWidth);\n  },\n  get isLandscape() {\n    return getOrientation(windowHeight, windowWidth) === orientations.LANDSCAPE;\n  },\n  get screenWidth() {\n    return screenWidth;\n  },\n  get screenHeight() {\n    return screenHeight;\n  },\n  get windowWidth() {\n    return windowWidth;\n  },\n  get windowHeight() {\n    return windowHeight;\n  },\n  get isSmallScreen() {\n    return screenWidth <= 340;\n  },\n  get isShortScreen() {\n    return screenHeight <= 600;\n  },\n  get screenAspectRatio() {\n    return getAspectRatio();\n  },\n  get isTablet() {\n    return isTablet;\n  },\n  set isTablet(value) {\n    isTablet = value;\n  },\n  get isWideScreen() {\n    return isTablet || this.isLandscape;\n  },\n  getSafeAreaInsets: function getSafeAreaInsets() {\n    var orientation = getOrientation(screenHeight, screenWidth);\n    return orientation === orientations.LANDSCAPE ? {\n      left: 44,\n      right: 44,\n      bottom: 24,\n      top: 0\n    } : {\n      left: 0,\n      right: 0,\n      bottom: 34,\n      top: 44\n    };\n  },\n  get isIphoneX() {\n    return isIOS && !Platform.isPad && !Platform.isTVOS && (screenHeight >= 812 || screenWidth >= 812);\n  },\n  addDimensionsEventListener: function addDimensionsEventListener(callback) {\n    return Dimensions.addEventListener('change', callback);\n  },\n  removeDimensionsEventListener: function removeDimensionsEventListener(callback) {\n    if (callback.remove) {\n      callback.remove();\n    } else {\n      Dimensions.removeEventListener('change', callback);\n    }\n  },\n  get accessibility() {\n    return accessibility;\n  },\n  backspaceKey: 'Backspace',\n  enterKey: 'Enter'\n};\nsetStatusBarHeight();\nDimensions.addEventListener('change', updateConstants);\nexport default constants;","map":{"version":3,"names":["orientations","isAndroid","Platform","OS","isIOS","isWeb","isTablet","statusBarHeight","screenHeight","Dimensions","get","height","screenWidth","width","windowHeight","windowWidth","isPad","getAspectRatio","Math","max","setStatusBarHeight","StatusBarManager","NativeModules","HEIGHT","getOrientation","PORTRAIT","LANDSCAPE","updateConstants","dimensions","screen","window","accessibility","isScreenReaderEnabled","handleScreenReaderChanged","AccessibilityInfo","addEventListener","setAccessibility","then","constants","getAndroidVersion","parseInt","Version","undefined","isRTL","I18nManager","orientation","isLandscape","isSmallScreen","isShortScreen","screenAspectRatio","value","isWideScreen","getSafeAreaInsets","left","right","bottom","top","isIphoneX","isTVOS","addDimensionsEventListener","callback","removeDimensionsEventListener","remove","removeEventListener","backspaceKey","enterKey"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/commons/Constants.js"],"sourcesContent":["import { Platform, Dimensions, NativeModules, I18nManager, AccessibilityInfo } from 'react-native';\nexport let orientations;\n(function (orientations) {\n  orientations[\"PORTRAIT\"] = \"portrait\";\n  orientations[\"LANDSCAPE\"] = \"landscape\";\n})(orientations || (orientations = {}));\nconst isAndroid = Platform.OS === 'android';\nconst isIOS = Platform.OS === 'ios';\nconst isWeb = Platform.OS === 'web';\nlet isTablet;\nlet statusBarHeight;\nlet screenHeight = Dimensions.get('screen').height;\nlet screenWidth = Dimensions.get('screen').width;\nlet windowHeight = Dimensions.get('window').height;\nlet windowWidth = Dimensions.get('window').width;\n\n//@ts-ignore\nisTablet = Platform.isPad || getAspectRatio() < 1.6 && Math.max(screenWidth, screenHeight) >= 900;\nfunction setStatusBarHeight() {\n  const {\n    StatusBarManager\n  } = NativeModules;\n  statusBarHeight = StatusBarManager?.HEIGHT || 0; // So there will be a value for any case\n  // statusBarHeight = isIOS ? 20 : StatusBarManager.HEIGHT;\n  // if (isIOS) {\n  //   // override guesstimate height with the actual height from StatusBarManager\n  //   StatusBarManager.getHeight((data: any) => (statusBarHeight = data.height));\n  // }\n}\n\nfunction getAspectRatio() {\n  return screenWidth < screenHeight ? screenHeight / screenWidth : screenWidth / screenHeight;\n}\nfunction getOrientation(height, width) {\n  return width < height ? orientations.PORTRAIT : orientations.LANDSCAPE;\n}\nexport function updateConstants(dimensions) {\n  screenHeight = dimensions.screen.height;\n  screenWidth = dimensions.screen.width;\n  windowWidth = dimensions.window.width;\n  windowHeight = dimensions.window.height;\n  setStatusBarHeight();\n}\nconst accessibility = {\n  isScreenReaderEnabled: false\n};\nfunction handleScreenReaderChanged(isScreenReaderEnabled) {\n  accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n}\nAccessibilityInfo.addEventListener('screenReaderChanged', handleScreenReaderChanged);\nfunction setAccessibility() {\n  AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {\n    accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n  });\n}\nsetAccessibility();\nconst constants = {\n  /* Platform */\n  orientations,\n  isAndroid,\n  isIOS,\n  isWeb,\n  getAndroidVersion: () => {\n    return isAndroid ? parseInt(Platform.Version, 10) : undefined;\n  },\n  /* Navigation */\n  get statusBarHeight() {\n    return statusBarHeight;\n  },\n  /* Layout */\n  isRTL: I18nManager.isRTL,\n  get orientation() {\n    return getOrientation(windowHeight, windowWidth);\n  },\n  get isLandscape() {\n    return getOrientation(windowHeight, windowWidth) === orientations.LANDSCAPE;\n  },\n  get screenWidth() {\n    return screenWidth;\n  },\n  get screenHeight() {\n    return screenHeight;\n  },\n  get windowWidth() {\n    return windowWidth;\n  },\n  get windowHeight() {\n    return windowHeight;\n  },\n  get isSmallScreen() {\n    return screenWidth <= 340;\n  },\n  get isShortScreen() {\n    return screenHeight <= 600;\n  },\n  get screenAspectRatio() {\n    return getAspectRatio();\n  },\n  get isTablet() {\n    return isTablet;\n  },\n  set isTablet(value) {\n    isTablet = value;\n  },\n  get isWideScreen() {\n    return isTablet || this.isLandscape;\n  },\n  getSafeAreaInsets: () => {\n    const orientation = getOrientation(screenHeight, screenWidth);\n    return orientation === orientations.LANDSCAPE ? {\n      left: 44,\n      right: 44,\n      bottom: 24,\n      top: 0\n    } : {\n      left: 0,\n      right: 0,\n      bottom: 34,\n      top: 44\n    };\n  },\n  /* Devices */\n  get isIphoneX() {\n    return isIOS &&\n    //@ts-ignore\n    !Platform.isPad &&\n    //@ts-ignore\n    !Platform.isTVOS && (screenHeight >= 812 || screenWidth >= 812);\n  },\n  /* Orientation */\n  addDimensionsEventListener: callback => {\n    return Dimensions.addEventListener('change', callback);\n  },\n  /* Dimensions */\n  removeDimensionsEventListener: callback => {\n    if (callback.remove) {\n      callback.remove();\n    } else {\n      Dimensions.removeEventListener('change', callback);\n    }\n  },\n  /* Accessibility */\n  get accessibility() {\n    return accessibility;\n  },\n  /* Keyboard */\n  backspaceKey: 'Backspace',\n  enterKey: 'Enter'\n};\nsetStatusBarHeight();\nDimensions.addEventListener('change', updateConstants);\nexport default constants;"],"mappings":";;;;;AACA,OAAO,IAAIA,YAAY;AACvB,CAAC,UAAUA,YAAY,EAAE;EACvBA,YAAY,CAAC,UAAU,CAAC,GAAG,UAAU;EACrCA,YAAY,CAAC,WAAW,CAAC,GAAG,WAAW;AACzC,CAAC,EAAEA,YAAY,KAAKA,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;AACvC,IAAMC,SAAS,GAAGC,QAAQ,CAACC,EAAE,KAAK,SAAS;AAC3C,IAAMC,KAAK,GAAGF,QAAQ,CAACC,EAAE,KAAK,KAAK;AACnC,IAAME,KAAK,GAAGH,QAAQ,CAACC,EAAE,KAAK,KAAK;AACnC,IAAIG,QAAQ;AACZ,IAAIC,eAAe;AACnB,IAAIC,YAAY,GAAGC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,MAAM;AAClD,IAAIC,WAAW,GAAGH,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACG,KAAK;AAChD,IAAIC,YAAY,GAAGL,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,MAAM;AAClD,IAAII,WAAW,GAAGN,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACG,KAAK;AAGhDP,QAAQ,GAAGJ,QAAQ,CAACc,KAAK,IAAIC,cAAc,EAAE,GAAG,GAAG,IAAIC,IAAI,CAACC,GAAG,CAACP,WAAW,EAAEJ,YAAY,CAAC,IAAI,GAAG;AACjG,SAASY,kBAAkB,GAAG;EAC5B,IACEC,gBAAgB,GACdC,aAAa,CADfD,gBAAgB;EAElBd,eAAe,GAAG,CAAAc,gBAAgB,oBAAhBA,gBAAgB,CAAEE,MAAM,KAAI,CAAC;AAMjD;AAEA,SAASN,cAAc,GAAG;EACxB,OAAOL,WAAW,GAAGJ,YAAY,GAAGA,YAAY,GAAGI,WAAW,GAAGA,WAAW,GAAGJ,YAAY;AAC7F;AACA,SAASgB,cAAc,CAACb,MAAM,EAAEE,KAAK,EAAE;EACrC,OAAOA,KAAK,GAAGF,MAAM,GAAGX,YAAY,CAACyB,QAAQ,GAAGzB,YAAY,CAAC0B,SAAS;AACxE;AACA,OAAO,SAASC,eAAe,CAACC,UAAU,EAAE;EAC1CpB,YAAY,GAAGoB,UAAU,CAACC,MAAM,CAAClB,MAAM;EACvCC,WAAW,GAAGgB,UAAU,CAACC,MAAM,CAAChB,KAAK;EACrCE,WAAW,GAAGa,UAAU,CAACE,MAAM,CAACjB,KAAK;EACrCC,YAAY,GAAGc,UAAU,CAACE,MAAM,CAACnB,MAAM;EACvCS,kBAAkB,EAAE;AACtB;AACA,IAAMW,aAAa,GAAG;EACpBC,qBAAqB,EAAE;AACzB,CAAC;AACD,SAASC,yBAAyB,CAACD,qBAAqB,EAAE;EACxDD,aAAa,CAACC,qBAAqB,GAAGA,qBAAqB;AAC7D;AACAE,iBAAiB,CAACC,gBAAgB,CAAC,qBAAqB,EAAEF,yBAAyB,CAAC;AACpF,SAASG,gBAAgB,GAAG;EAC1BF,iBAAiB,CAACF,qBAAqB,EAAE,CAACK,IAAI,CAAC,UAAAL,qBAAqB,EAAI;IACtED,aAAa,CAACC,qBAAqB,GAAGA,qBAAqB;EAC7D,CAAC,CAAC;AACJ;AACAI,gBAAgB,EAAE;AAClB,IAAME,SAAS,GAAG;EAEhBtC,YAAY,EAAZA,YAAY;EACZC,SAAS,EAATA,SAAS;EACTG,KAAK,EAALA,KAAK;EACLC,KAAK,EAALA,KAAK;EACLkC,iBAAiB,EAAE,6BAAM;IACvB,OAAOtC,SAAS,GAAGuC,QAAQ,CAACtC,QAAQ,CAACuC,OAAO,EAAE,EAAE,CAAC,GAAGC,SAAS;EAC/D,CAAC;EAED,IAAInC,eAAe,GAAG;IACpB,OAAOA,eAAe;EACxB,CAAC;EAEDoC,KAAK,EAAEC,WAAW,CAACD,KAAK;EACxB,IAAIE,WAAW,GAAG;IAChB,OAAOrB,cAAc,CAACV,YAAY,EAAEC,WAAW,CAAC;EAClD,CAAC;EACD,IAAI+B,WAAW,GAAG;IAChB,OAAOtB,cAAc,CAACV,YAAY,EAAEC,WAAW,CAAC,KAAKf,YAAY,CAAC0B,SAAS;EAC7E,CAAC;EACD,IAAId,WAAW,GAAG;IAChB,OAAOA,WAAW;EACpB,CAAC;EACD,IAAIJ,YAAY,GAAG;IACjB,OAAOA,YAAY;EACrB,CAAC;EACD,IAAIO,WAAW,GAAG;IAChB,OAAOA,WAAW;EACpB,CAAC;EACD,IAAID,YAAY,GAAG;IACjB,OAAOA,YAAY;EACrB,CAAC;EACD,IAAIiC,aAAa,GAAG;IAClB,OAAOnC,WAAW,IAAI,GAAG;EAC3B,CAAC;EACD,IAAIoC,aAAa,GAAG;IAClB,OAAOxC,YAAY,IAAI,GAAG;EAC5B,CAAC;EACD,IAAIyC,iBAAiB,GAAG;IACtB,OAAOhC,cAAc,EAAE;EACzB,CAAC;EACD,IAAIX,QAAQ,GAAG;IACb,OAAOA,QAAQ;EACjB,CAAC;EACD,IAAIA,QAAQ,CAAC4C,KAAK,EAAE;IAClB5C,QAAQ,GAAG4C,KAAK;EAClB,CAAC;EACD,IAAIC,YAAY,GAAG;IACjB,OAAO7C,QAAQ,IAAI,IAAI,CAACwC,WAAW;EACrC,CAAC;EACDM,iBAAiB,EAAE,6BAAM;IACvB,IAAMP,WAAW,GAAGrB,cAAc,CAAChB,YAAY,EAAEI,WAAW,CAAC;IAC7D,OAAOiC,WAAW,KAAK7C,YAAY,CAAC0B,SAAS,GAAG;MAC9C2B,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,GAAG,EAAE;IACP,CAAC,GAAG;MACFH,IAAI,EAAE,CAAC;MACPC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE,EAAE;MACVC,GAAG,EAAE;IACP,CAAC;EACH,CAAC;EAED,IAAIC,SAAS,GAAG;IACd,OAAOrD,KAAK,IAEZ,CAACF,QAAQ,CAACc,KAAK,IAEf,CAACd,QAAQ,CAACwD,MAAM,KAAKlD,YAAY,IAAI,GAAG,IAAII,WAAW,IAAI,GAAG,CAAC;EACjE,CAAC;EAED+C,0BAA0B,EAAE,oCAAAC,QAAQ,EAAI;IACtC,OAAOnD,UAAU,CAAC0B,gBAAgB,CAAC,QAAQ,EAAEyB,QAAQ,CAAC;EACxD,CAAC;EAEDC,6BAA6B,EAAE,uCAAAD,QAAQ,EAAI;IACzC,IAAIA,QAAQ,CAACE,MAAM,EAAE;MACnBF,QAAQ,CAACE,MAAM,EAAE;IACnB,CAAC,MAAM;MACLrD,UAAU,CAACsD,mBAAmB,CAAC,QAAQ,EAAEH,QAAQ,CAAC;IACpD;EACF,CAAC;EAED,IAAI7B,aAAa,GAAG;IAClB,OAAOA,aAAa;EACtB,CAAC;EAEDiC,YAAY,EAAE,WAAW;EACzBC,QAAQ,EAAE;AACZ,CAAC;AACD7C,kBAAkB,EAAE;AACpBX,UAAU,CAAC0B,gBAAgB,CAAC,QAAQ,EAAER,eAAe,CAAC;AACtD,eAAeW,SAAS"},"metadata":{},"sourceType":"module"}