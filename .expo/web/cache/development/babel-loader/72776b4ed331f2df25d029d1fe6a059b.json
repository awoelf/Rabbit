{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"expandableContent\", \"useDialog\", \"modalProps\", \"dialogProps\", \"showTopBar\", \"topBarProps\", \"renderCustomOverlay\", \"disabled\", \"onPress\", \"customValue\", \"testID\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport Dialog from \"../../components/dialog\";\nimport { Colors } from \"../../style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ExpandableOverlay = function ExpandableOverlay(props, ref) {\n  var children = props.children,\n    expandableContent = props.expandableContent,\n    useDialog = props.useDialog,\n    modalProps = props.modalProps,\n    dialogProps = props.dialogProps,\n    showTopBar = props.showTopBar,\n    topBarProps = props.topBarProps,\n    renderCustomOverlay = props.renderCustomOverlay,\n    disabled = props.disabled,\n    onPress = props.onPress,\n    customValue = props.customValue,\n    testID = props.testID,\n    others = _objectWithoutProperties(props, _excluded);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    visible = _useState2[0],\n    setExpandableVisible = _useState2[1];\n  var openExpandable = useCallback(function () {\n    setExpandableVisible(true);\n    onPress == null ? void 0 : onPress(props);\n  }, [onPress, customValue]);\n  var closeExpandable = useCallback(function () {\n    setExpandableVisible(false);\n    useDialog ? dialogProps == null ? void 0 : dialogProps.onDismiss == null ? void 0 : dialogProps.onDismiss() : modalProps == null ? void 0 : modalProps.onDismiss == null ? void 0 : modalProps.onDismiss();\n  }, [useDialog, dialogProps == null ? void 0 : dialogProps.onDismiss, modalProps == null ? void 0 : modalProps.onDismiss]);\n  var toggleExpandable = useCallback(function () {\n    return visible ? closeExpandable() : openExpandable();\n  }, [visible, openExpandable, closeExpandable]);\n  useImperativeHandle(ref, function () {\n    return {\n      openExpandable: openExpandable,\n      closeExpandable: closeExpandable,\n      toggleExpandable: toggleExpandable\n    };\n  });\n  var renderModal = function renderModal() {\n    return _jsxs(Modal, _objectSpread(_objectSpread({\n      testID: testID + \".overlay\",\n      overlayBackgroundColor: Colors.$backgroundDefault\n    }, modalProps), {}, {\n      visible: visible,\n      onDismiss: closeExpandable,\n      children: [showTopBar && _jsx(Modal.TopBar, _objectSpread({\n        onDone: closeExpandable\n      }, topBarProps)), expandableContent]\n    }));\n  };\n  var renderDialog = function renderDialog() {\n    return _jsx(Dialog, _objectSpread(_objectSpread({\n      testID: testID + \".overlay\"\n    }, dialogProps), {}, {\n      visible: visible,\n      onDismiss: closeExpandable,\n      children: expandableContent\n    }));\n  };\n  var renderOverlay = function renderOverlay() {\n    if (renderCustomOverlay) {\n      return renderCustomOverlay({\n        visible: visible,\n        openExpandable: openExpandable,\n        closeExpandable: closeExpandable,\n        toggleExpandable: toggleExpandable\n      });\n    } else {\n      return useDialog ? renderDialog() : renderModal();\n    }\n  };\n  return _jsxs(TouchableOpacity, _objectSpread(_objectSpread({}, others), {}, {\n    onPress: openExpandable,\n    disabled: disabled,\n    testID: testID,\n    children: [_jsx(View, {\n      pointerEvents: \"none\",\n      children: children\n    }), renderOverlay()]\n  }));\n};\nexport default forwardRef(ExpandableOverlay);","map":{"version":3,"names":["React","useCallback","useState","forwardRef","useImperativeHandle","TouchableOpacity","View","Modal","Dialog","Colors","ExpandableOverlay","props","ref","children","expandableContent","useDialog","modalProps","dialogProps","showTopBar","topBarProps","renderCustomOverlay","disabled","onPress","customValue","testID","others","visible","setExpandableVisible","openExpandable","closeExpandable","onDismiss","toggleExpandable","renderModal","$backgroundDefault","renderDialog","renderOverlay"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/incubator/expandableOverlay/index.js"],"sourcesContent":["import React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport Dialog from \"../../components/dialog\";\nimport { Colors } from \"../../style\";\nconst ExpandableOverlay = (props, ref) => {\n  const {\n    children,\n    expandableContent,\n    useDialog,\n    modalProps,\n    dialogProps,\n    showTopBar,\n    topBarProps,\n    renderCustomOverlay,\n    disabled,\n    onPress,\n    customValue,\n    testID,\n    ...others\n  } = props;\n  const [visible, setExpandableVisible] = useState(false);\n  const openExpandable = useCallback(() => {\n    setExpandableVisible(true);\n    onPress?.(props);\n  }, [onPress, customValue]);\n  const closeExpandable = useCallback(() => {\n    setExpandableVisible(false);\n    useDialog ? dialogProps?.onDismiss?.() : modalProps?.onDismiss?.();\n  }, [useDialog, dialogProps?.onDismiss, modalProps?.onDismiss]);\n  const toggleExpandable = useCallback(() => visible ? closeExpandable() : openExpandable(), [visible, openExpandable, closeExpandable]);\n  useImperativeHandle(ref, () => ({\n    openExpandable,\n    closeExpandable,\n    toggleExpandable\n  }));\n  const renderModal = () => {\n    return <Modal testID={`${testID}.overlay`} overlayBackgroundColor={Colors.$backgroundDefault} {...modalProps} visible={visible} onDismiss={closeExpandable}>\n        {showTopBar && <Modal.TopBar onDone={closeExpandable} {...topBarProps} />}\n        {expandableContent}\n      </Modal>;\n  };\n  const renderDialog = () => {\n    return <Dialog testID={`${testID}.overlay`} {...dialogProps} visible={visible} onDismiss={closeExpandable}>\n        {expandableContent}\n      </Dialog>;\n  };\n  const renderOverlay = () => {\n    if (renderCustomOverlay) {\n      return renderCustomOverlay({\n        visible,\n        openExpandable,\n        closeExpandable,\n        toggleExpandable\n      });\n    } else {\n      return useDialog ? renderDialog() : renderModal();\n    }\n  };\n  return <TouchableOpacity {...others} onPress={openExpandable} disabled={disabled} testID={testID}>\n      <View pointerEvents=\"none\">{children}</View>\n      {renderOverlay()}\n    </TouchableOpacity>;\n};\nexport default forwardRef(ExpandableOverlay);"],"mappings":"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"},"metadata":{},"sourceType":"module"}