{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _join from \"lodash/join\";\nimport _flatten from \"lodash/flatten\";\nimport _map from \"lodash/map\";\nimport _keys from \"lodash/keys\";\nimport _flow from \"lodash/flow\";\nimport _forEach from \"lodash/forEach\";\nimport Constants from \"../commons/Constants\";\nimport TypographyPresets from \"./typographyPresets\";\nexport var Typography = function () {\n  function Typography() {\n    _classCallCheck(this, Typography);\n    this.keysPattern = this.generateKeysPattern();\n  }\n  _createClass(Typography, [{\n    key: \"loadTypographies\",\n    value: function loadTypographies(typographies) {\n      var _this = this;\n      _forEach(typographies, function (value, key) {\n        _this[key] = value;\n      });\n      this.keysPattern = this.generateKeysPattern();\n    }\n  }, {\n    key: \"getKeysPattern\",\n    value: function getKeysPattern() {\n      return this.keysPattern;\n    }\n  }, {\n    key: \"generateKeysPattern\",\n    value: function generateKeysPattern() {\n      return new RegExp(_flow(_keys, function (keys) {\n        return _map(keys, function (key) {\n          return [\"\" + key];\n        });\n      }, _flatten, function (keys) {\n        return _join(keys, '|');\n      })(this));\n    }\n  }, {\n    key: \"measureWidth\",\n    value: function () {\n      var _measureWidth = _asyncToGenerator(function* (text) {\n        var typography = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TypographyPresets.text70;\n        var containerWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Constants.screenWidth;\n        var size = yield this.measureTextSize(text, typography, containerWidth);\n        if (size) {\n          return size.width;\n        }\n      });\n      function measureWidth(_x) {\n        return _measureWidth.apply(this, arguments);\n      }\n      return measureWidth;\n    }()\n  }, {\n    key: \"measureTextSize\",\n    value: function () {\n      var _measureTextSize = _asyncToGenerator(function* (text) {\n        var typography = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TypographyPresets.text70;\n        var containerWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Constants.screenWidth;\n        var rnTextSize = require('react-native-text-size').default;\n        if (text) {\n          var size = yield rnTextSize.measure(_objectSpread({\n            text: text,\n            width: containerWidth\n          }, typography));\n          return size;\n        }\n      });\n      function measureTextSize(_x2) {\n        return _measureTextSize.apply(this, arguments);\n      }\n      return measureTextSize;\n    }()\n  }]);\n  return Typography;\n}();\nvar TypedTypography = Typography;\nvar typography = new TypedTypography();\ntypography.loadTypographies(TypographyPresets);\nexport default typography;","map":{"version":3,"names":["_join","_flatten","_map","_keys","_flow","_forEach","Constants","TypographyPresets","Typography","keysPattern","generateKeysPattern","typographies","value","key","RegExp","keys","text","typography","text70","containerWidth","screenWidth","size","measureTextSize","width","rnTextSize","require","default","measure","TypedTypography","loadTypographies"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/style/typography.js"],"sourcesContent":["import _join from \"lodash/join\";\nimport _flatten from \"lodash/flatten\";\nimport _map from \"lodash/map\";\nimport _keys from \"lodash/keys\";\nimport _flow from \"lodash/flow\";\nimport _forEach from \"lodash/forEach\";\nimport Constants from \"../commons/Constants\";\nimport TypographyPresets from \"./typographyPresets\";\nexport class Typography {\n  keysPattern = this.generateKeysPattern();\n\n  /**\n   * Load custom set of typographies\n   * arguments:\n   * typographies - map of keys and typography values\n   * e.g {text15: {fontSize: 58, fontWeight: '100', lineHeight: Math.floor(58 * 1.4)}}\n   */\n  loadTypographies(typographies) {\n    _forEach(typographies, (value, key) => {\n      //@ts-ignore\n      this[key] = value;\n    });\n    this.keysPattern = this.generateKeysPattern();\n  }\n  getKeysPattern() {\n    return this.keysPattern;\n  }\n  generateKeysPattern() {\n    return new RegExp(_flow(_keys, keys => _map(keys, key => [`${key}`]), _flatten, keys => _join(keys, '|'))(this));\n  }\n\n  // TODO: deprecate\n  async measureWidth(text, typography = TypographyPresets.text70, containerWidth = Constants.screenWidth) {\n    const size = await this.measureTextSize(text, typography, containerWidth);\n    if (size) {\n      return size.width;\n    }\n  }\n  async measureTextSize(text, typography = TypographyPresets.text70, containerWidth = Constants.screenWidth) {\n    const rnTextSize = require('react-native-text-size').default;\n    if (text) {\n      const size = await rnTextSize.measure({\n        text,\n        // text to measure, can include symbols\n        width: containerWidth,\n        // max-width of the \"virtual\" container\n        ...typography // RN font specification\n      });\n\n      return size;\n    }\n  }\n}\nconst TypedTypography = Typography;\nconst typography = new TypedTypography();\ntypography.loadTypographies(TypographyPresets);\nexport default typography;"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,aAAa;AAC/B,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,SAAS;AAChB,OAAOC,iBAAiB;AACxB,WAAaC,UAAU;EAAA;IAAA;IAAA,KACrBC,WAAW,GAAG,IAAI,CAACC,mBAAmB,EAAE;EAAA;EAAA;IAAA;IAAA,OAQxC,0BAAiBC,YAAY,EAAE;MAAA;MAC7BN,QAAQ,CAACM,YAAY,EAAE,UAACC,KAAK,EAAEC,GAAG,EAAK;QAErC,KAAI,CAACA,GAAG,CAAC,GAAGD,KAAK;MACnB,CAAC,CAAC;MACF,IAAI,CAACH,WAAW,GAAG,IAAI,CAACC,mBAAmB,EAAE;IAC/C;EAAC;IAAA;IAAA,OACD,0BAAiB;MACf,OAAO,IAAI,CAACD,WAAW;IACzB;EAAC;IAAA;IAAA,OACD,+BAAsB;MACpB,OAAO,IAAIK,MAAM,CAACV,KAAK,CAACD,KAAK,EAAE,UAAAY,IAAI;QAAA,OAAIb,IAAI,CAACa,IAAI,EAAE,UAAAF,GAAG;UAAA,OAAI,MAAIA,GAAG,CAAG;QAAA,EAAC;MAAA,GAAEZ,QAAQ,EAAE,UAAAc,IAAI;QAAA,OAAIf,KAAK,CAACe,IAAI,EAAE,GAAG,CAAC;MAAA,EAAC,CAAC,IAAI,CAAC,CAAC;IAClH;EAAC;IAAA;IAAA;MAAA,sCAGD,WAAmBC,IAAI,EAAiF;QAAA,IAA/EC,UAAU,uEAAGV,iBAAiB,CAACW,MAAM;QAAA,IAAEC,cAAc,uEAAGb,SAAS,CAACc,WAAW;QACpG,IAAMC,IAAI,SAAS,IAAI,CAACC,eAAe,CAACN,IAAI,EAAEC,UAAU,EAAEE,cAAc,CAAC;QACzE,IAAIE,IAAI,EAAE;UACR,OAAOA,IAAI,CAACE,KAAK;QACnB;MACF,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yCACD,WAAsBP,IAAI,EAAiF;QAAA,IAA/EC,UAAU,uEAAGV,iBAAiB,CAACW,MAAM;QAAA,IAAEC,cAAc,uEAAGb,SAAS,CAACc,WAAW;QACvG,IAAMI,UAAU,GAAGC,OAAO,CAAC,wBAAwB,CAAC,CAACC,OAAO;QAC5D,IAAIV,IAAI,EAAE;UACR,IAAMK,IAAI,SAASG,UAAU,CAACG,OAAO;YACnCX,IAAI,EAAJA,IAAI;YAEJO,KAAK,EAAEJ;UAAc,GAElBF,UAAU,EACb;UAEF,OAAOI,IAAI;QACb;MACF,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAEH,IAAMO,eAAe,GAAGpB,UAAU;AAClC,IAAMS,UAAU,GAAG,IAAIW,eAAe,EAAE;AACxCX,UAAU,CAACY,gBAAgB,CAACtB,iBAAiB,CAAC;AAC9C,eAAeU,UAAU"},"metadata":{},"sourceType":"module"}