{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _forEach from \"lodash/forEach\";\nimport _merge from \"lodash/merge\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _xor from \"lodash/xor\";\nimport _remove from \"lodash/remove\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport { PlatformColor } from \"react-native-web/dist/index\";\nimport Constants from \"../commons/Constants\";\nimport Config from \"../commons/Config\";\nvar Scheme = function () {\n  function Scheme() {\n    var _this = this;\n    _classCallCheck(this, Scheme);\n    this.currentScheme = Config.appScheme;\n    this.schemes = {\n      light: {},\n      dark: {}\n    };\n    this.changeListeners = [];\n    Appearance.addChangeListener(function () {\n      if (_this.currentScheme === 'default') {\n        _this.broadcastSchemeChange();\n      }\n    });\n  }\n  _createClass(Scheme, [{\n    key: \"broadcastSchemeChange\",\n    value: function broadcastSchemeChange() {\n      var _this2 = this;\n      this.changeListeners.forEach(function (listener) {\n        return listener(_this2.getSchemeType());\n      });\n    }\n  }, {\n    key: \"getSchemeType\",\n    value: function getSchemeType() {\n      var scheme = this.currentScheme === 'default' ? Appearance.getColorScheme() : this.currentScheme;\n      return scheme != null ? scheme : 'light';\n    }\n  }, {\n    key: \"setScheme\",\n    value: function setScheme(scheme) {\n      var prevSchemeType = this.getSchemeType();\n      if (!['light', 'dark', 'default'].includes(scheme)) {\n        throw new Error(scheme + \" is invalid colorScheme, please use 'light' | 'dark' | 'default'\");\n      }\n      this.currentScheme = scheme;\n      if (prevSchemeType !== this.getSchemeType()) {\n        this.broadcastSchemeChange();\n      }\n    }\n  }, {\n    key: \"loadSchemes\",\n    value: function loadSchemes(schemes) {\n      var _this3 = this;\n      var lightSchemeKeys = Object.keys(schemes.light);\n      var darkSchemeKeys = Object.keys(schemes.dark);\n      var missingKeys = _xor(lightSchemeKeys, darkSchemeKeys);\n      if (!_isEmpty(missingKeys)) {\n        throw new Error(\"There is a mismatch in scheme keys: \" + missingKeys.join(', '));\n      }\n      var platformColorsSchemes = _cloneDeep(schemes);\n      _forEach(schemes, function (scheme, schemeKey) {\n        _forEach(scheme, function (colorValue, colorKey) {\n          Object.defineProperty(platformColorsSchemes[schemeKey], colorKey, {\n            get: function get() {\n              var color = colorValue;\n              if (Config.usePlatformColors) {\n                if (Constants.isAndroid) {\n                  color = PlatformColor(\"@color/\" + colorKey.replace(/^[$]/, ''));\n                } else {\n                  color = PlatformColor(colorKey);\n                }\n                color.toString = function () {\n                  return schemes[_this3.getSchemeType()][colorKey];\n                };\n              }\n              return color;\n            }\n          });\n        });\n      });\n      _merge(this.schemes, platformColorsSchemes);\n    }\n  }, {\n    key: \"getScheme\",\n    value: function getScheme() {\n      return this.schemes[this.getSchemeType()];\n    }\n  }, {\n    key: \"addChangeListener\",\n    value: function addChangeListener(listener) {\n      this.changeListeners.push(listener);\n    }\n  }, {\n    key: \"removeChangeListener\",\n    value: function removeChangeListener(listener) {\n      _remove(this.changeListeners, function (changeListener) {\n        return changeListener === listener;\n      });\n    }\n  }]);\n  return Scheme;\n}();\nexport default new Scheme();","map":{"version":3,"names":["_cloneDeep","_forEach","_merge","_isEmpty","_xor","_remove","PlatformColor","Constants","Config","Scheme","currentScheme","appScheme","schemes","light","dark","changeListeners","Appearance","addChangeListener","broadcastSchemeChange","forEach","listener","getSchemeType","scheme","getColorScheme","prevSchemeType","includes","Error","lightSchemeKeys","Object","keys","darkSchemeKeys","missingKeys","join","platformColorsSchemes","schemeKey","colorValue","colorKey","defineProperty","get","color","usePlatformColors","isAndroid","replace","toString","push","changeListener"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/style/scheme.js"],"sourcesContent":["import _cloneDeep from \"lodash/cloneDeep\";\nimport _forEach from \"lodash/forEach\";\nimport _merge from \"lodash/merge\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _xor from \"lodash/xor\";\nimport _remove from \"lodash/remove\";\nimport { Appearance, PlatformColor } from 'react-native';\nimport Constants from \"../commons/Constants\";\nimport Config from \"../commons/Config\";\nclass Scheme {\n  currentScheme = Config.appScheme;\n  schemes = {\n    light: {},\n    dark: {}\n  };\n  changeListeners = [];\n  constructor() {\n    Appearance.addChangeListener(() => {\n      if (this.currentScheme === 'default') {\n        this.broadcastSchemeChange();\n      }\n    });\n  }\n  broadcastSchemeChange() {\n    this.changeListeners.forEach(listener => listener(this.getSchemeType()));\n  }\n\n  /**\n   * Get app's current color scheme\n   */\n  getSchemeType() {\n    const scheme = this.currentScheme === 'default' ? Appearance.getColorScheme() : this.currentScheme;\n    return scheme ?? 'light';\n  }\n\n  /**\n   * Set color scheme for app\n   * arguments:\n   * scheme - color scheme e.g light/dark/default\n   */\n  setScheme(scheme) {\n    const prevSchemeType = this.getSchemeType();\n    if (!['light', 'dark', 'default'].includes(scheme)) {\n      throw new Error(`${scheme} is invalid colorScheme, please use 'light' | 'dark' | 'default'`);\n    }\n    this.currentScheme = scheme;\n    if (prevSchemeType !== this.getSchemeType()) {\n      this.broadcastSchemeChange();\n    }\n  }\n\n  /**\n   * Load set of schemes for light/dark mode\n   * arguments:\n   * schemes - two sets of map of colors e.g {light: {screen: 'white'}, dark: {screen: 'black'}}\n   */\n  loadSchemes(schemes) {\n    const lightSchemeKeys = Object.keys(schemes.light);\n    const darkSchemeKeys = Object.keys(schemes.dark);\n    const missingKeys = _xor(lightSchemeKeys, darkSchemeKeys);\n    if (!_isEmpty(missingKeys)) {\n      throw new Error(`There is a mismatch in scheme keys: ${missingKeys.join(', ')}`);\n    }\n    const platformColorsSchemes = _cloneDeep(schemes);\n    _forEach(schemes, (scheme, schemeKey) => {\n      _forEach(scheme, (colorValue, colorKey) => {\n        // @ts-expect-error\n        Object.defineProperty(platformColorsSchemes[schemeKey], colorKey, {\n          get: () => {\n            let color = colorValue;\n            if (Config.usePlatformColors) {\n              if (Constants.isAndroid) {\n                // Remove the $ prefix cause it's not allowed in Android and add the @color prefix\n                color = PlatformColor(`@color/${colorKey.replace(/^[$]/, '')}`);\n              } else {\n                color = PlatformColor(colorKey);\n              }\n              // Get the original hex string value by calling toString()\n              color.toString = () => schemes[this.getSchemeType()][colorKey];\n            }\n            return color;\n          }\n        });\n      });\n    });\n    _merge(this.schemes, platformColorsSchemes);\n  }\n\n  /**\n   * Retrieve scheme by current scheme type\n   */\n  getScheme() {\n    return this.schemes[this.getSchemeType()];\n  }\n\n  /**\n   * Add a change scheme event listener\n   */\n  addChangeListener(listener) {\n    this.changeListeners.push(listener);\n  }\n\n  /**\n   * Remove a change scheme event listener\n   * arguments:\n   * listener - listener reference to remove\n   */\n  removeChangeListener(listener) {\n    _remove(this.changeListeners, changeListener => changeListener === listener);\n  }\n}\nexport default new Scheme();"],"mappings":"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"},"metadata":{},"sourceType":"module"}