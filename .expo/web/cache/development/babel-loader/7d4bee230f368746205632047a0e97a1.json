{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport decode from 'jwt-decode';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar AuthService = function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n  }\n  _createClass(AuthService, [{\n    key: \"getProfile\",\n    value: function getProfile() {\n      return decode(this.getToken());\n    }\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      var token = this.getToken();\n      return !!token && !this.isTokenExpired(token);\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else return false;\n      } catch (err) {\n        return false;\n      }\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return AsyncStorage.getItem('id_token');\n    }\n  }, {\n    key: \"login\",\n    value: function login(idToken) {\n      AsyncStorage.setItem('id_token', idToken);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      AsyncStorage.removeItem('id_token');\n    }\n  }]);\n  return AuthService;\n}();\nexport default new AuthService();","map":{"version":3,"names":["decode","AsyncStorage","AuthService","getToken","token","isTokenExpired","decoded","exp","Date","now","err","getItem","idToken","setItem","removeItem"],"sources":["C:/Users/Alex/Documents/development/Rabbit/src/utils/auth.js"],"sourcesContent":["import decode from 'jwt-decode';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return AsyncStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    AsyncStorage.setItem('id_token', idToken);\r\n\r\n    // window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    AsyncStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    // window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,YAAY;AAC/B,OAAOC,YAAY,MAAM,2CAA2C;AAAC,IAE/DC,WAAW;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACf,sBAAa;MACX,OAAOF,MAAM,CAAC,IAAI,CAACG,QAAQ,EAAE,CAAC;IAChC;EAAC;IAAA;IAAA,OAED,oBAAW;MAET,IAAMC,KAAK,GAAG,IAAI,CAACD,QAAQ,EAAE;MAC7B,OAAO,CAAC,CAACC,KAAK,IAAI,CAAC,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC;IAC/C;EAAC;IAAA;IAAA,OAED,wBAAeA,KAAK,EAAE;MACpB,IAAI;QACF,IAAME,OAAO,GAAGN,MAAM,CAACI,KAAK,CAAC;QAC7B,IAAIE,OAAO,CAACC,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,EAAE;UACnC,OAAO,IAAI;QACb,CAAC,MAAM,OAAO,KAAK;MACrB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,OAAO,KAAK;MACd;IACF;EAAC;IAAA;IAAA,OAED,oBAAW;MAET,OAAOT,YAAY,CAACU,OAAO,CAAC,UAAU,CAAC;IACzC;EAAC;IAAA;IAAA,OAED,eAAMC,OAAO,EAAE;MAEbX,YAAY,CAACY,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;IAG3C;EAAC;IAAA;IAAA,OAED,kBAAS;MAEPX,YAAY,CAACa,UAAU,CAAC,UAAU,CAAC;IAGrC;EAAC;EAAA;AAAA;AAGH,eAAe,IAAIZ,WAAW,EAAE"},"metadata":{},"sourceType":"module"}