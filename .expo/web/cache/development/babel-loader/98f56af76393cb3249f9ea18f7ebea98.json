{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { Constants } from \"../../commons/new\";\nvar DEFAULT_THRESHOLD = Constants.isAndroid ? 1 : 0;\nvar useScrollReached = function useScrollReached() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$horizontal = props.horizontal,\n    horizontal = _props$horizontal === void 0 ? false : _props$horizontal,\n    _props$threshold = props.threshold,\n    threshold = _props$threshold === void 0 ? DEFAULT_THRESHOLD : _props$threshold;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isScrollAtStart = _useState2[0],\n    setScrollAtStart = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isScrollAtEnd = _useState4[0],\n    setScrollAtEnd = _useState4[1];\n  var onScroll = useCallback(function (event) {\n    var _event$nativeEvent = event.nativeEvent,\n      _event$nativeEvent$la = _event$nativeEvent.layoutMeasurement,\n      layoutWidth = _event$nativeEvent$la.width,\n      layoutHeight = _event$nativeEvent$la.height,\n      _event$nativeEvent$co = _event$nativeEvent.contentOffset,\n      offsetX = _event$nativeEvent$co.x,\n      offsetY = _event$nativeEvent$co.y,\n      _event$nativeEvent$co2 = _event$nativeEvent.contentSize,\n      contentWidth = _event$nativeEvent$co2.width,\n      contentHeight = _event$nativeEvent$co2.height;\n    var layoutSize = horizontal ? layoutWidth : layoutHeight;\n    var offset = horizontal ? offsetX : offsetY;\n    var contentSize = horizontal ? contentWidth : contentHeight;\n    if (horizontal && Constants.isRTL && Constants.isAndroid) {\n      var scrollingWidth = Math.max(0, contentSize - layoutSize);\n      offset = scrollingWidth - offset;\n    }\n    var closeToStart = offset <= threshold;\n    if (closeToStart !== isScrollAtStart) {\n      setScrollAtStart(closeToStart);\n    }\n    var closeToEnd = layoutSize + offset >= contentSize - threshold;\n    if (closeToEnd !== isScrollAtEnd) {\n      setScrollAtEnd(closeToEnd);\n    }\n  }, [horizontal, threshold, isScrollAtStart, isScrollAtEnd]);\n  return {\n    onScroll: onScroll,\n    isScrollAtStart: isScrollAtStart,\n    isScrollAtEnd: isScrollAtEnd\n  };\n};\nexport default useScrollReached;","map":{"version":3,"names":["useState","useCallback","Constants","DEFAULT_THRESHOLD","isAndroid","useScrollReached","props","horizontal","threshold","isScrollAtStart","setScrollAtStart","isScrollAtEnd","setScrollAtEnd","onScroll","event","nativeEvent","layoutMeasurement","layoutWidth","width","layoutHeight","height","contentOffset","offsetX","x","offsetY","y","contentSize","contentWidth","contentHeight","layoutSize","offset","isRTL","scrollingWidth","Math","max","closeToStart","closeToEnd"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/hooks/useScrollReached/index.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { Constants } from \"../../commons/new\";\nconst DEFAULT_THRESHOLD = Constants.isAndroid ? 1 : 0;\nconst useScrollReached = (props = {}) => {\n  const {\n    horizontal = false,\n    threshold = DEFAULT_THRESHOLD\n  } = props;\n  const [isScrollAtStart, setScrollAtStart] = useState(true);\n  const [isScrollAtEnd, setScrollAtEnd] = useState(false);\n  const onScroll = useCallback(event => {\n    const {\n      nativeEvent: {\n        layoutMeasurement: {\n          width: layoutWidth,\n          height: layoutHeight\n        },\n        contentOffset: {\n          x: offsetX,\n          y: offsetY\n        },\n        contentSize: {\n          width: contentWidth,\n          height: contentHeight\n        }\n      }\n    } = event;\n    const layoutSize = horizontal ? layoutWidth : layoutHeight;\n    let offset = horizontal ? offsetX : offsetY;\n    const contentSize = horizontal ? contentWidth : contentHeight;\n    if (horizontal && Constants.isRTL && Constants.isAndroid) {\n      const scrollingWidth = Math.max(0, contentSize - layoutSize);\n      offset = scrollingWidth - offset;\n    }\n    const closeToStart = offset <= threshold;\n    if (closeToStart !== isScrollAtStart) {\n      setScrollAtStart(closeToStart);\n    }\n    const closeToEnd = layoutSize + offset >= contentSize - threshold;\n    if (closeToEnd !== isScrollAtEnd) {\n      setScrollAtEnd(closeToEnd);\n    }\n  }, [horizontal, threshold, isScrollAtStart, isScrollAtEnd]);\n  return {\n    onScroll,\n    isScrollAtStart,\n    isScrollAtEnd\n  };\n};\nexport default useScrollReached;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,SAAS;AAClB,IAAMC,iBAAiB,GAAGD,SAAS,CAACE,SAAS,GAAG,CAAC,GAAG,CAAC;AACrD,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAmB;EAAA,IAAfC,KAAK,uEAAG,CAAC,CAAC;EAClC,wBAGIA,KAAK,CAFPC,UAAU;IAAVA,UAAU,kCAAG,KAAK;IAAA,mBAEhBD,KAAK,CADPE,SAAS;IAATA,SAAS,iCAAGL,iBAAiB;EAE/B,gBAA4CH,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAnDS,eAAe;IAAEC,gBAAgB;EACxC,iBAAwCV,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAhDW,aAAa;IAAEC,cAAc;EACpC,IAAMC,QAAQ,GAAGZ,WAAW,CAAC,UAAAa,KAAK,EAAI;IACpC,yBAeIA,KAAK,CAdPC,WAAW;MAAA,2CACTC,iBAAiB;MACRC,WAAW,yBAAlBC,KAAK;MACGC,YAAY,yBAApBC,MAAM;MAAA,2CAERC,aAAa;MACRC,OAAO,yBAAVC,CAAC;MACEC,OAAO,yBAAVC,CAAC;MAAA,4CAEHC,WAAW;MACFC,YAAY,0BAAnBT,KAAK;MACGU,aAAa,0BAArBR,MAAM;IAIZ,IAAMS,UAAU,GAAGtB,UAAU,GAAGU,WAAW,GAAGE,YAAY;IAC1D,IAAIW,MAAM,GAAGvB,UAAU,GAAGe,OAAO,GAAGE,OAAO;IAC3C,IAAME,WAAW,GAAGnB,UAAU,GAAGoB,YAAY,GAAGC,aAAa;IAC7D,IAAIrB,UAAU,IAAIL,SAAS,CAAC6B,KAAK,IAAI7B,SAAS,CAACE,SAAS,EAAE;MACxD,IAAM4B,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,WAAW,GAAGG,UAAU,CAAC;MAC5DC,MAAM,GAAGE,cAAc,GAAGF,MAAM;IAClC;IACA,IAAMK,YAAY,GAAGL,MAAM,IAAItB,SAAS;IACxC,IAAI2B,YAAY,KAAK1B,eAAe,EAAE;MACpCC,gBAAgB,CAACyB,YAAY,CAAC;IAChC;IACA,IAAMC,UAAU,GAAGP,UAAU,GAAGC,MAAM,IAAIJ,WAAW,GAAGlB,SAAS;IACjE,IAAI4B,UAAU,KAAKzB,aAAa,EAAE;MAChCC,cAAc,CAACwB,UAAU,CAAC;IAC5B;EACF,CAAC,EAAE,CAAC7B,UAAU,EAAEC,SAAS,EAAEC,eAAe,EAAEE,aAAa,CAAC,CAAC;EAC3D,OAAO;IACLE,QAAQ,EAARA,QAAQ;IACRJ,eAAe,EAAfA,eAAe;IACfE,aAAa,EAAbA;EACF,CAAC;AACH,CAAC;AACD,eAAeN,gBAAgB"},"metadata":{},"sourceType":"module"}