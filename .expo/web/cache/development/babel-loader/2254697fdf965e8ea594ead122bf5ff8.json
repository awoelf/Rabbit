{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport KeyboardTrackingView from \"./KeyboardTrackingView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar KeyboardAwareInsetsView = function KeyboardAwareInsetsView(props) {\n  return _jsx(KeyboardTrackingView, _objectSpread(_objectSpread({}, props), {}, {\n    pointerEvents: 'none',\n    style: styles.insetsView,\n    scrollToFocusedInput: true\n  }));\n};\nvar ScreenSize = Dimensions.get('window');\nvar styles = StyleSheet.create({\n  insetsView: {\n    width: ScreenSize.width,\n    height: 0.5,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    backgroundColor: 'transparent'\n  }\n});\nKeyboardAwareInsetsView.displayName = 'KeyboardAwareInsetsView';\nexport default KeyboardAwareInsetsView;","map":{"version":3,"names":["React","KeyboardTrackingView","KeyboardAwareInsetsView","props","styles","insetsView","ScreenSize","Dimensions","get","StyleSheet","create","width","height","position","bottom","left","backgroundColor","displayName"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardTracking/KeyboardAwareInsetsView.js"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, Dimensions } from 'react-native';\nimport KeyboardTrackingView from \"./KeyboardTrackingView\";\n\n/**\n * @description: Used to add an inset when a keyboard is used and might hide part of the screen.\n *\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js\n * @notes: This view is useful only for iOS.\n */\nconst KeyboardAwareInsetsView = props => <KeyboardTrackingView {...props} pointerEvents={'none'} style={styles.insetsView} scrollToFocusedInput />;\nconst ScreenSize = Dimensions.get('window');\nconst styles = StyleSheet.create({\n  insetsView: {\n    width: ScreenSize.width,\n    height: 0.5,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    backgroundColor: 'transparent'\n  }\n});\nKeyboardAwareInsetsView.displayName = 'KeyboardAwareInsetsView';\nexport default KeyboardAwareInsetsView;"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAAA;AAE1B,OAAOC,oBAAoB;AAA+B;AAQ1D,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAGC,KAAK;EAAA,OAAI,KAAC,oBAAoB,kCAAKA,KAAK;IAAE,aAAa,EAAE,MAAO;IAAC,KAAK,EAAEC,MAAM,CAACC,UAAW;IAAC,oBAAoB;EAAA,GAAG;AAAA;AAClJ,IAAMC,UAAU,GAAGC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;AAC3C,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAM,CAAC;EAC/BL,UAAU,EAAE;IACVM,KAAK,EAAEL,UAAU,CAACK,KAAK;IACvBC,MAAM,EAAE,GAAG;IACXC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,CAAC;IACTC,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE;EACnB;AACF,CAAC,CAAC;AACFd,uBAAuB,CAACe,WAAW,GAAG,yBAAyB;AAC/D,eAAef,uBAAuB"},"metadata":{},"sourceType":"module"}