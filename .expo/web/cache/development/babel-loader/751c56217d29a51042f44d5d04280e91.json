{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { PureComponent } from 'react';\nvar FakeStateScreenForDocs = function (_PureComponent) {\n  _inherits(FakeStateScreenForDocs, _PureComponent);\n  var _super = _createSuper(FakeStateScreenForDocs);\n  function FakeStateScreenForDocs() {\n    _classCallCheck(this, FakeStateScreenForDocs);\n    return _super.apply(this, arguments);\n  }\n  _createClass(FakeStateScreenForDocs, [{\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return FakeStateScreenForDocs;\n}(PureComponent);\nFakeStateScreenForDocs.displayName = 'StateScreen';","map":{"version":3,"names":["PureComponent","FakeStateScreenForDocs","displayName"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/components/stateScreen/types.js"],"sourcesContent":["import { PureComponent } from 'react';\n/**\n * @description: Component that shows a full screen for a certain state, like an empty state\n * @image: https://user-images.githubusercontent.com/33805983/34672894-f262ab84-f488-11e7-83f0-4ee0f0ac34ba.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/EmptyStateScreen.tsx\n */\n// @ts-ignore\nclass FakeStateScreenForDocs extends PureComponent {\n  // eslint-disable-line\n  static displayName = 'StateScreen';\n  render() {\n    return null;\n  }\n}"],"mappings":";;;;;;;AAAA,SAASA,aAAa,QAAQ,OAAO;AAAC,IAOhCC,sBAAsB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAG1B,kBAAS;MACP,OAAO,IAAI;IACb;EAAC;EAAA;AAAA,EALkCD,aAAa;AAA5CC,sBAAsB,CAEnBC,WAAW,GAAG,aAAa"},"metadata":{},"sourceType":"module"}