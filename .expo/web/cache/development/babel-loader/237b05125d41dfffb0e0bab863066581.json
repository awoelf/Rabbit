{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport _toString from \"lodash/toString\";\nexport function formatLastItemLabel(label, options) {\n  var _ref = options || {},\n    _ref$shouldAddPlus = _ref.shouldAddPlus,\n    shouldAddPlus = _ref$shouldAddPlus === void 0 ? true : _ref$shouldAddPlus,\n    maxPlusLimit = _ref.maxPlusLimit;\n  if (typeof label !== 'number') {\n    return label;\n  }\n  var formattedLabel;\n  var roundedNumber = _toString(Math.round(label));\n  if (label < 1000) {\n    formattedLabel = \"\" + label;\n  } else if (label >= 10000000) {\n    formattedLabel = roundedNumber.slice(0, -6) + \"m\";\n  } else if (label >= 1000000) {\n    formattedLabel = parseInt(roundedNumber.slice(0, -5)) / 10 + \"m\";\n  } else {\n    formattedLabel = roundedNumber.slice(0, -3) + \"k\";\n  }\n  var isInPlusRange = !_isNil(maxPlusLimit) ? formattedLabel.length <= maxPlusLimit : shouldAddPlus;\n  if (shouldAddPlus && isInPlusRange) {\n    return \"+\" + formattedLabel;\n  }\n  return formattedLabel;\n}","map":{"version":3,"names":["_isNil","_toString","formatLastItemLabel","label","options","shouldAddPlus","maxPlusLimit","formattedLabel","roundedNumber","Math","round","slice","parseInt","isInPlusRange","length"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/helpers/FormattingPresenter.js"],"sourcesContent":["import _isNil from \"lodash/isNil\";\nimport _toString from \"lodash/toString\";\nexport function formatLastItemLabel(label, options) {\n  const {\n    shouldAddPlus = true,\n    maxPlusLimit\n  } = options || {};\n  if (typeof label !== 'number') {\n    return label;\n  }\n  let formattedLabel;\n  const roundedNumber = _toString(Math.round(label));\n  if (label < 1000) {\n    formattedLabel = `${label}`;\n  } else if (label >= 10000000) {\n    formattedLabel = `${roundedNumber.slice(0, -6)}m`;\n  } else if (label >= 1000000) {\n    formattedLabel = `${parseInt(roundedNumber.slice(0, -5)) / 10}m`;\n  } else {\n    formattedLabel = `${roundedNumber.slice(0, -3)}k`;\n  }\n  const isInPlusRange = !_isNil(maxPlusLimit) ? formattedLabel.length <= maxPlusLimit : shouldAddPlus;\n  if (shouldAddPlus && isInPlusRange) {\n    return `+${formattedLabel}`;\n  }\n  return formattedLabel;\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,cAAc;AACjC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAO,SAASC,mBAAmB,CAACC,KAAK,EAAEC,OAAO,EAAE;EAClD,WAGIA,OAAO,IAAI,CAAC,CAAC;IAAA,0BAFfC,aAAa;IAAbA,aAAa,mCAAG,IAAI;IACpBC,YAAY,QAAZA,YAAY;EAEd,IAAI,OAAOH,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EACA,IAAII,cAAc;EAClB,IAAMC,aAAa,GAAGP,SAAS,CAACQ,IAAI,CAACC,KAAK,CAACP,KAAK,CAAC,CAAC;EAClD,IAAIA,KAAK,GAAG,IAAI,EAAE;IAChBI,cAAc,QAAMJ,KAAO;EAC7B,CAAC,MAAM,IAAIA,KAAK,IAAI,QAAQ,EAAE;IAC5BI,cAAc,GAAMC,aAAa,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAG;EACnD,CAAC,MAAM,IAAIR,KAAK,IAAI,OAAO,EAAE;IAC3BI,cAAc,GAAMK,QAAQ,CAACJ,aAAa,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,MAAG;EAClE,CAAC,MAAM;IACLJ,cAAc,GAAMC,aAAa,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAG;EACnD;EACA,IAAME,aAAa,GAAG,CAACb,MAAM,CAACM,YAAY,CAAC,GAAGC,cAAc,CAACO,MAAM,IAAIR,YAAY,GAAGD,aAAa;EACnG,IAAIA,aAAa,IAAIQ,aAAa,EAAE;IAClC,aAAWN,cAAc;EAC3B;EACA,OAAOA,cAAc;AACvB"},"metadata":{},"sourceType":"module"}