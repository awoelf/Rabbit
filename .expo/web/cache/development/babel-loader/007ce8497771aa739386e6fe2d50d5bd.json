{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useMemo } from 'react';\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport { useDidUpdate } from \"../../hooks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction ExpandableSection(props) {\n  var expanded = props.expanded,\n    sectionHeader = props.sectionHeader,\n    children = props.children,\n    top = props.top;\n  var animate = function animate() {\n    LayoutAnimation.configureNext(_objectSpread(_objectSpread({}, LayoutAnimation.Presets.easeInEaseOut), {}, {\n      duration: 300\n    }));\n  };\n  var onPress = function onPress() {\n    props.onPress == null ? void 0 : props.onPress();\n    animate();\n  };\n  useDidUpdate(function () {\n    animate();\n  }, [expanded]);\n  var accessibilityState = useMemo(function () {\n    return {\n      expanded: expanded\n    };\n  }, [expanded]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [top && expanded && children, _jsx(TouchableOpacity, {\n      onPress: onPress,\n      accessibilityState: accessibilityState,\n      children: sectionHeader\n    }), !top && expanded && children]\n  });\n}\nexport default ExpandableSection;\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"names":["React","useMemo","View","TouchableOpacity","useDidUpdate","ExpandableSection","props","expanded","sectionHeader","children","top","animate","LayoutAnimation","configureNext","Presets","easeInEaseOut","duration","onPress","accessibilityState","styles","container","StyleSheet","create","overflow"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/components/expandableSection/index.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { LayoutAnimation, StyleSheet } from 'react-native';\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport { useDidUpdate } from \"../../hooks\";\n/**\n * @description: ExpandableSection component to render expanded section below or above the sectionHeader\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ExpandableSectionScreen.tsx\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ExpandableSection/ExpandableSection.gif?raw=true\n */\n\nfunction ExpandableSection(props) {\n  const {\n    expanded,\n    sectionHeader,\n    children,\n    top\n  } = props;\n\n  /**\n   * TODO: move to reanimated LayoutAnimation after updating to version 2.3.0\n   * after migration, trigger the animation only in useDidUpdate.\n   */\n  const animate = () => {\n    LayoutAnimation.configureNext({\n      ...LayoutAnimation.Presets.easeInEaseOut,\n      duration: 300\n    });\n  };\n  const onPress = () => {\n    props.onPress?.();\n    animate();\n  };\n  useDidUpdate(() => {\n    animate();\n  }, [expanded]);\n  const accessibilityState = useMemo(() => {\n    return {\n      expanded\n    };\n  }, [expanded]);\n  return <View style={styles.container}>\n      {top && expanded && children}\n      <TouchableOpacity onPress={onPress} accessibilityState={accessibilityState}>\n        {sectionHeader}\n      </TouchableOpacity>\n      {!top && expanded && children}\n    </View>;\n}\nexport default ExpandableSection;\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  }\n});"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AAAC;AAAA;AAEvC,OAAOC,IAAI;AACX,OAAOC,gBAAgB;AACvB,SAASC,YAAY;AAAsB;AAAA;AAO3C,SAASC,iBAAiB,CAACC,KAAK,EAAE;EAChC,IACEC,QAAQ,GAIND,KAAK,CAJPC,QAAQ;IACRC,aAAa,GAGXF,KAAK,CAHPE,aAAa;IACbC,QAAQ,GAENH,KAAK,CAFPG,QAAQ;IACRC,GAAG,GACDJ,KAAK,CADPI,GAAG;EAOL,IAAMC,OAAO,GAAG,SAAVA,OAAO,GAAS;IACpBC,eAAe,CAACC,aAAa,iCACxBD,eAAe,CAACE,OAAO,CAACC,aAAa;MACxCC,QAAQ,EAAE;IAAG,GACb;EACJ,CAAC;EACD,IAAMC,OAAO,GAAG,SAAVA,OAAO,GAAS;IACpBX,KAAK,CAACW,OAAO,oBAAbX,KAAK,CAACW,OAAO,EAAI;IACjBN,OAAO,EAAE;EACX,CAAC;EACDP,YAAY,CAAC,YAAM;IACjBO,OAAO,EAAE;EACX,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EACd,IAAMW,kBAAkB,GAAGjB,OAAO,CAAC,YAAM;IACvC,OAAO;MACLM,QAAQ,EAARA;IACF,CAAC;EACH,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EACd,OAAO,MAAC,IAAI;IAAC,KAAK,EAAEY,MAAM,CAACC,SAAU;IAAA,WAChCV,GAAG,IAAIH,QAAQ,IAAIE,QAAQ,EAC5B,KAAC,gBAAgB;MAAC,OAAO,EAAEQ,OAAQ;MAAC,kBAAkB,EAAEC,kBAAmB;MAAA,UACxEV;IAAa,EACG,EAClB,CAACE,GAAG,IAAIH,QAAQ,IAAIE,QAAQ;EAAA,EACxB;AACX;AACA,eAAeJ,iBAAiB;AAChC,IAAMc,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAC/BF,SAAS,EAAE;IACTG,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}