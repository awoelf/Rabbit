{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useContext, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors } from \"../../style\";\nimport Text from \"../../components/text\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { getColorByState } from \"./Presenter\";\nimport FieldContext from \"./FieldContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Label = function Label(_ref) {\n  var label = _ref.label,\n    _ref$labelColor = _ref.labelColor,\n    labelColor = _ref$labelColor === void 0 ? Colors.$textDefault : _ref$labelColor,\n    labelStyle = _ref.labelStyle,\n    labelProps = _ref.labelProps,\n    validationMessagePosition = _ref.validationMessagePosition,\n    floatingPlaceholder = _ref.floatingPlaceholder,\n    testID = _ref.testID;\n  var context = useContext(FieldContext);\n  var forceHidingLabel = !context.isValid && validationMessagePosition === ValidationMessagePosition.TOP;\n  var style = useMemo(function () {\n    return [styles.label, labelStyle, floatingPlaceholder && styles.dummyPlaceholder];\n  }, [labelStyle, floatingPlaceholder]);\n  if ((label || floatingPlaceholder) && !forceHidingLabel) {\n    return _jsx(Text, _objectSpread(_objectSpread({\n      testID: testID,\n      color: getColorByState(labelColor, context),\n      style: style\n    }, labelProps), {}, {\n      children: label\n    }));\n  }\n  return null;\n};\nvar styles = StyleSheet.create({\n  label: {\n    minHeight: 20\n  },\n  dummyPlaceholder: {\n    opacity: 0\n  }\n});\nLabel.displayName = 'Incubator.TextField';\nexport default Label;","map":{"version":3,"names":["React","useContext","useMemo","Colors","Text","ValidationMessagePosition","getColorByState","FieldContext","Label","label","labelColor","$textDefault","labelStyle","labelProps","validationMessagePosition","floatingPlaceholder","testID","context","forceHidingLabel","isValid","TOP","style","styles","dummyPlaceholder","StyleSheet","create","minHeight","opacity","displayName"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/incubator/TextField/Label.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Colors } from \"../../style\";\nimport Text from \"../../components/text\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { getColorByState } from \"./Presenter\";\nimport FieldContext from \"./FieldContext\";\nconst Label = ({\n  label,\n  labelColor = Colors.$textDefault,\n  labelStyle,\n  labelProps,\n  validationMessagePosition,\n  floatingPlaceholder,\n  testID\n}) => {\n  const context = useContext(FieldContext);\n  const forceHidingLabel = !context.isValid && validationMessagePosition === ValidationMessagePosition.TOP;\n  const style = useMemo(() => {\n    return [styles.label, labelStyle, floatingPlaceholder && styles.dummyPlaceholder];\n  }, [labelStyle, floatingPlaceholder]);\n  if ((label || floatingPlaceholder) && !forceHidingLabel) {\n    return <Text testID={testID} color={getColorByState(labelColor, context)} style={style} {...labelProps}>\n        {label}\n      </Text>;\n  }\n  return null;\n};\nconst styles = StyleSheet.create({\n  label: {\n    minHeight: 20\n  },\n  dummyPlaceholder: {\n    opacity: 0\n  }\n});\nLabel.displayName = 'Incubator.TextField';\nexport default Label;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAAC;AAEnD,SAASC,MAAM;AACf,OAAOC,IAAI;AACX,SAASC,yBAAyB;AAClC,SAASC,eAAe;AACxB,OAAOC,YAAY;AAAuB;AAC1C,IAAMC,KAAK,GAAG,SAARA,KAAK,OAQL;EAAA,IAPJC,KAAK,QAALA,KAAK;IAAA,uBACLC,UAAU;IAAVA,UAAU,gCAAGP,MAAM,CAACQ,YAAY;IAChCC,UAAU,QAAVA,UAAU;IACVC,UAAU,QAAVA,UAAU;IACVC,yBAAyB,QAAzBA,yBAAyB;IACzBC,mBAAmB,QAAnBA,mBAAmB;IACnBC,MAAM,QAANA,MAAM;EAEN,IAAMC,OAAO,GAAGhB,UAAU,CAACM,YAAY,CAAC;EACxC,IAAMW,gBAAgB,GAAG,CAACD,OAAO,CAACE,OAAO,IAAIL,yBAAyB,KAAKT,yBAAyB,CAACe,GAAG;EACxG,IAAMC,KAAK,GAAGnB,OAAO,CAAC,YAAM;IAC1B,OAAO,CAACoB,MAAM,CAACb,KAAK,EAAEG,UAAU,EAAEG,mBAAmB,IAAIO,MAAM,CAACC,gBAAgB,CAAC;EACnF,CAAC,EAAE,CAACX,UAAU,EAAEG,mBAAmB,CAAC,CAAC;EACrC,IAAI,CAACN,KAAK,IAAIM,mBAAmB,KAAK,CAACG,gBAAgB,EAAE;IACvD,OAAO,KAAC,IAAI;MAAC,MAAM,EAAEF,MAAO;MAAC,KAAK,EAAEV,eAAe,CAACI,UAAU,EAAEO,OAAO,CAAE;MAAC,KAAK,EAAEI;IAAM,GAAKR,UAAU;MAAA,UACjGJ;IAAK,GACD;EACX;EACA,OAAO,IAAI;AACb,CAAC;AACD,IAAMa,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAC/BhB,KAAK,EAAE;IACLiB,SAAS,EAAE;EACb,CAAC;EACDH,gBAAgB,EAAE;IAChBI,OAAO,EAAE;EACX;AACF,CAAC,CAAC;AACFnB,KAAK,CAACoB,WAAW,GAAG,qBAAqB;AACzC,eAAepB,KAAK"},"metadata":{},"sourceType":"module"}