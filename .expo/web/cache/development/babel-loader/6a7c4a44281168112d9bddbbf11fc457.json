{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"hint\", \"color\", \"forwardedRef\", \"formatter\", \"useGestureHandlerInput\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useContext, useMemo } from 'react';\nimport RNTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Constants } from \"../../commons/new\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport FieldContext from \"./FieldContext\";\nimport useImperativeInputHandle from \"./useImperativeInputHandle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DEFAULT_INPUT_COLOR = {\n  default: Colors.$textDefault,\n  disabled: Colors.$textDisabled\n};\nvar Input = function Input(_ref) {\n  var style = _ref.style,\n    hint = _ref.hint,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? DEFAULT_INPUT_COLOR : _ref$color,\n    forwardedRef = _ref.forwardedRef,\n    formatter = _ref.formatter,\n    useGestureHandlerInput = _ref.useGestureHandlerInput,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var inputRef = useImperativeInputHandle(forwardedRef, {\n    onChangeText: props.onChangeText\n  });\n  var context = useContext(FieldContext);\n  var placeholder = !context.isFocused ? props.placeholder : hint || props.placeholder;\n  var inputColor = getColorByState(color, context);\n  var placeholderTextColor = getColorByState(props.placeholderTextColor, context);\n  var value = formatter && !context.isFocused ? formatter(props.value) : props.value;\n  var TextInput = useMemo(function () {\n    if (useGestureHandlerInput) {\n      var _require = require('react-native-gesture-handler'),\n        GestureTextInput = _require.TextInput;\n      return GestureTextInput;\n    } else {\n      return RNTextInput;\n    }\n  }, [useGestureHandlerInput]);\n  return _jsx(TextInput, _objectSpread(_objectSpread({\n    style: [styles.input, !!inputColor && {\n      color: inputColor\n    }, style]\n  }, props), {}, {\n    value: value,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    ref: inputRef,\n    underlineColorAndroid: \"transparent\",\n    accessibilityState: {\n      disabled: props.editable === false\n    }\n  }));\n};\nvar styles = StyleSheet.create({\n  input: _objectSpread({\n    flexGrow: 1,\n    textAlign: Constants.isRTL ? 'right' : 'left',\n    outlineWidth: Constants.isWeb ? 0 : undefined,\n    paddingTop: 0,\n    paddingBottom: 0\n  }, Platform.select({\n    android: {\n      padding: 0,\n      textAlignVertical: 'center'\n    }\n  }))\n});\nInput.displayName = 'Incubator.TextField';\nexport default Input;","map":{"version":3,"names":["React","useContext","useMemo","Constants","getColorByState","Colors","FieldContext","useImperativeInputHandle","DEFAULT_INPUT_COLOR","default","$textDefault","disabled","$textDisabled","Input","style","hint","color","forwardedRef","formatter","useGestureHandlerInput","props","inputRef","onChangeText","context","placeholder","isFocused","inputColor","placeholderTextColor","value","TextInput","require","GestureTextInput","RNTextInput","styles","input","editable","StyleSheet","create","flexGrow","textAlign","isRTL","outlineWidth","isWeb","undefined","paddingTop","paddingBottom","Platform","select","android","padding","textAlignVertical","displayName"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/incubator/TextField/Input.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { TextInput as RNTextInput, StyleSheet, Platform } from 'react-native';\nimport { Constants } from \"../../commons/new\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport FieldContext from \"./FieldContext\";\nimport useImperativeInputHandle from \"./useImperativeInputHandle\";\nconst DEFAULT_INPUT_COLOR = {\n  default: Colors.$textDefault,\n  disabled: Colors.$textDisabled\n};\nconst Input = ({\n  style,\n  hint,\n  color = DEFAULT_INPUT_COLOR,\n  forwardedRef,\n  formatter,\n  useGestureHandlerInput,\n  ...props\n}) => {\n  const inputRef = useImperativeInputHandle(forwardedRef, {\n    onChangeText: props.onChangeText\n  });\n  const context = useContext(FieldContext);\n  const placeholder = !context.isFocused ? props.placeholder : hint || props.placeholder;\n  const inputColor = getColorByState(color, context);\n  const placeholderTextColor = getColorByState(props.placeholderTextColor, context);\n  const value = formatter && !context.isFocused ? formatter(props.value) : props.value;\n  const TextInput = useMemo(() => {\n    if (useGestureHandlerInput) {\n      const {\n        TextInput: GestureTextInput\n      } = require('react-native-gesture-handler');\n      return GestureTextInput;\n    } else {\n      return RNTextInput;\n    }\n  }, [useGestureHandlerInput]);\n  return <TextInput style={[styles.input, !!inputColor && {\n    color: inputColor\n  }, style]} {...props} value={value} placeholder={placeholder} placeholderTextColor={placeholderTextColor}\n  // @ts-expect-error\n  ref={inputRef} underlineColorAndroid=\"transparent\" accessibilityState={{\n    disabled: props.editable === false\n  }} />;\n};\nconst styles = StyleSheet.create({\n  input: {\n    flexGrow: 1,\n    textAlign: Constants.isRTL ? 'right' : 'left',\n    outlineWidth: Constants.isWeb ? 0 : undefined,\n    // Setting paddingTop/Bottom separately fix height issues on iOS with multiline\n    paddingTop: 0,\n    paddingBottom: 0,\n    ...Platform.select({\n      // This reset android input inner spacing\n      android: {\n        padding: 0,\n        textAlignVertical: 'center'\n      }\n    })\n  }\n});\nInput.displayName = 'Incubator.TextField';\nexport default Input;"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAAC;AAAA;AAAA;AAEnD,SAASC,SAAS;AAClB,SAASC,eAAe;AACxB,SAASC,MAAM;AACf,OAAOC,YAAY;AACnB,OAAOC,wBAAwB;AAAmC;AAClE,IAAMC,mBAAmB,GAAG;EAC1BC,OAAO,EAAEJ,MAAM,CAACK,YAAY;EAC5BC,QAAQ,EAAEN,MAAM,CAACO;AACnB,CAAC;AACD,IAAMC,KAAK,GAAG,SAARA,KAAK,OAQL;EAAA,IAPJC,KAAK,QAALA,KAAK;IACLC,IAAI,QAAJA,IAAI;IAAA,kBACJC,KAAK;IAALA,KAAK,2BAAGR,mBAAmB;IAC3BS,YAAY,QAAZA,YAAY;IACZC,SAAS,QAATA,SAAS;IACTC,sBAAsB,QAAtBA,sBAAsB;IACnBC,KAAK;EAER,IAAMC,QAAQ,GAAGd,wBAAwB,CAACU,YAAY,EAAE;IACtDK,YAAY,EAAEF,KAAK,CAACE;EACtB,CAAC,CAAC;EACF,IAAMC,OAAO,GAAGtB,UAAU,CAACK,YAAY,CAAC;EACxC,IAAMkB,WAAW,GAAG,CAACD,OAAO,CAACE,SAAS,GAAGL,KAAK,CAACI,WAAW,GAAGT,IAAI,IAAIK,KAAK,CAACI,WAAW;EACtF,IAAME,UAAU,GAAGtB,eAAe,CAACY,KAAK,EAAEO,OAAO,CAAC;EAClD,IAAMI,oBAAoB,GAAGvB,eAAe,CAACgB,KAAK,CAACO,oBAAoB,EAAEJ,OAAO,CAAC;EACjF,IAAMK,KAAK,GAAGV,SAAS,IAAI,CAACK,OAAO,CAACE,SAAS,GAAGP,SAAS,CAACE,KAAK,CAACQ,KAAK,CAAC,GAAGR,KAAK,CAACQ,KAAK;EACpF,IAAMC,SAAS,GAAG3B,OAAO,CAAC,YAAM;IAC9B,IAAIiB,sBAAsB,EAAE;MAC1B,eAEIW,OAAO,CAAC,8BAA8B,CAAC;QAD9BC,gBAAgB,YAA3BF,SAAS;MAEX,OAAOE,gBAAgB;IACzB,CAAC,MAAM;MACL,OAAOC,WAAW;IACpB;EACF,CAAC,EAAE,CAACb,sBAAsB,CAAC,CAAC;EAC5B,OAAO,KAAC,SAAS;IAAC,KAAK,EAAE,CAACc,MAAM,CAACC,KAAK,EAAE,CAAC,CAACR,UAAU,IAAI;MACtDV,KAAK,EAAEU;IACT,CAAC,EAAEZ,KAAK;EAAE,GAAKM,KAAK;IAAE,KAAK,EAAEQ,KAAM;IAAC,WAAW,EAAEJ,WAAY;IAAC,oBAAoB,EAAEG,oBAAqB;IAEzG,GAAG,EAAEN,QAAS;IAAC,qBAAqB,EAAC,aAAa;IAAC,kBAAkB,EAAE;MACrEV,QAAQ,EAAES,KAAK,CAACe,QAAQ,KAAK;IAC/B;EAAE,GAAG;AACP,CAAC;AACD,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAM,CAAC;EAC/BH,KAAK;IACHI,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAEpC,SAAS,CAACqC,KAAK,GAAG,OAAO,GAAG,MAAM;IAC7CC,YAAY,EAAEtC,SAAS,CAACuC,KAAK,GAAG,CAAC,GAAGC,SAAS;IAE7CC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE;EAAC,GACbC,QAAQ,CAACC,MAAM,CAAC;IAEjBC,OAAO,EAAE;MACPC,OAAO,EAAE,CAAC;MACVC,iBAAiB,EAAE;IACrB;EACF,CAAC,CAAC;AAEN,CAAC,CAAC;AACFrC,KAAK,CAACsC,WAAW,GAAG,qBAAqB;AACzC,eAAetC,KAAK"},"metadata":{},"sourceType":"module"}