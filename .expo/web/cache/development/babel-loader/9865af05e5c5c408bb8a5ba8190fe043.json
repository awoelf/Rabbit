{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport _map from \"lodash/map\";\nimport _size from \"lodash/size\";\nimport _get from \"lodash/get\";\nimport _first from \"lodash/first\";\nimport _flow from \"lodash/flow\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Spacings } from \"../../style\";\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../commons/new\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DEFAULT_NUM_COLUMNS = 3;\nvar DEFAULT_ITEM_SPACINGS = Spacings.s4;\nvar GridView = function (_UIComponent) {\n  _inherits(GridView, _UIComponent);\n  var _super = _createSuper(GridView);\n  function GridView() {\n    var _this;\n    _classCallCheck(this, GridView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      viewWidth: _this.getGridContainerWidth(),\n      numColumns: _this.calcNumberOfColumns(),\n      itemSize: _this.calcItemSize()\n    };\n    _this.onOrientationChanged = function () {\n      var keepItemSize = _this.props.keepItemSize;\n      var itemSize = _this.state.itemSize;\n      if (!_this.props.viewWidth) {\n        var newItemSize = keepItemSize ? itemSize : _this.calcItemSize();\n        _this.setState({\n          viewWidth: Math.floor(_this.getDefaultViewWidth()),\n          numColumns: _this.calcNumberOfColumns(),\n          itemSize: newItemSize\n        });\n      }\n    };\n    _this.renderItem = function (item, index) {\n      var _item$itemSize;\n      var itemSize = _this.state.itemSize;\n      var _this$props = _this.props,\n        items = _this$props.items,\n        itemSpacing = _this$props.itemSpacing,\n        renderCustomItem = _this$props.renderCustomItem;\n      var _this$state$numColumn = _this.state.numColumns,\n        numColumns = _this$state$numColumn === void 0 ? DEFAULT_NUM_COLUMNS : _this$state$numColumn;\n      var itemsCount = _size(items);\n      var rowCount = Math.ceil(itemsCount / numColumns);\n      var isLastItemInRow = (index + 1) % numColumns === 0;\n      var isLastRow = index + 1 > (rowCount - 1) * numColumns;\n      var isLastItem = index === itemsCount - 1;\n      var size = typeof item.itemSize === 'object' ? {\n        width: itemSize,\n        height: ((_item$itemSize = item.itemSize) == null ? void 0 : _item$itemSize.height) || itemSize\n      } : itemSize;\n      var itemProps = _objectSpread(_objectSpread({\n        key: index\n      }, item), {}, {\n        itemSize: size,\n        containerStyle: [!isLastItemInRow && {\n          marginRight: itemSpacing\n        }, !isLastRow && {\n          marginBottom: itemSpacing\n        }, item.containerStyle],\n        children: isLastItem ? _this.renderLastItemOverlay() : undefined\n      });\n      return renderCustomItem ? renderCustomItem(itemProps) : _jsx(GridListItem, _objectSpread({}, itemProps));\n    };\n    return _this;\n  }\n  _createClass(GridView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n    }\n  }, {\n    key: \"getDefaultViewWidth\",\n    value: function getDefaultViewWidth() {\n      return Constants.screenWidth - Spacings.s5 * 2;\n    }\n  }, {\n    key: \"getGridContainerWidth\",\n    value: function getGridContainerWidth() {\n      return Math.floor(this.props.viewWidth || this.getDefaultViewWidth());\n    }\n  }, {\n    key: \"calcNumberOfColumns\",\n    value: function calcNumberOfColumns() {\n      var _this$props2 = this.props,\n        numColumns = _this$props2.numColumns,\n        _this$props2$itemSpac = _this$props2.itemSpacing,\n        itemSpacing = _this$props2$itemSpac === void 0 ? DEFAULT_ITEM_SPACINGS : _this$props2$itemSpac,\n        maxItemWidth = _this$props2.maxItemWidth;\n      var containerWidth = this.getGridContainerWidth();\n      if (maxItemWidth) {\n        return Math.ceil((containerWidth + itemSpacing) / (maxItemWidth + itemSpacing));\n      } else {\n        return numColumns || DEFAULT_NUM_COLUMNS;\n      }\n    }\n  }, {\n    key: \"calcItemSize\",\n    value: function calcItemSize() {\n      var _this$props$itemSpaci = this.props.itemSpacing,\n        itemSpacing = _this$props$itemSpaci === void 0 ? DEFAULT_ITEM_SPACINGS : _this$props$itemSpaci;\n      var containerWidth = this.getGridContainerWidth();\n      var numColumns = this.calcNumberOfColumns();\n      return (containerWidth - itemSpacing * (numColumns - 1)) / numColumns;\n    }\n  }, {\n    key: \"renderLastItemOverlay\",\n    value: function renderLastItemOverlay() {\n      var _this$props3 = this.props,\n        lastItemLabel = _this$props3.lastItemLabel,\n        items = _this$props3.items,\n        lastItemOverlayColor = _this$props3.lastItemOverlayColor;\n      var formattedLabel = formatLastItemLabel(lastItemLabel, {\n        shouldAddPlus: true\n      });\n      if (!lastItemLabel) {\n        return;\n      }\n      var imageBorderRadius = _flow(_first, function (item) {\n        return _get(item, 'imageProps.borderRadius');\n      })(items);\n      return _jsx(View, {\n        style: [styles.overlayContainer, {\n          backgroundColor: lastItemOverlayColor,\n          borderRadius: imageBorderRadius\n        }],\n        children: _jsx(Text, {\n          mainBold: true,\n          white: true,\n          children: formattedLabel\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var itemSize = this.state.itemSize;\n      var _this$props4 = this.props,\n        items = _this$props4.items,\n        viewWidth = _this$props4.viewWidth;\n      return _jsx(View, {\n        style: [styles.container, {\n          width: viewWidth ? Math.floor(viewWidth) : undefined\n        }],\n        children: itemSize && _map(items, this.renderItem)\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var viewWidth;\n      var numColumns;\n      if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n        viewWidth = Math.floor(nextProps.viewWidth);\n      }\n      if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n        numColumns = nextProps.numColumns;\n      }\n      if (viewWidth || viewWidth) {\n        return {\n          viewWidth: viewWidth,\n          numColumns: numColumns\n        };\n      } else {\n        return null;\n      }\n    }\n  }]);\n  return GridView;\n}(UIComponent);\nGridView.displayName = 'GridView';\nGridView.defaultProps = {\n  numColumns: DEFAULT_NUM_COLUMNS,\n  itemSpacing: DEFAULT_ITEM_SPACINGS\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center',\n    justifyContent: 'center'\n  })\n});\nexport default GridView;","map":{"version":3,"names":["_map","_size","_get","_first","_flow","React","Spacings","UIComponent","View","Text","Constants","GridListItem","formatLastItemLabel","DEFAULT_NUM_COLUMNS","DEFAULT_ITEM_SPACINGS","s4","GridView","state","viewWidth","getGridContainerWidth","numColumns","calcNumberOfColumns","itemSize","calcItemSize","onOrientationChanged","keepItemSize","props","newItemSize","setState","Math","floor","getDefaultViewWidth","renderItem","item","index","items","itemSpacing","renderCustomItem","itemsCount","rowCount","ceil","isLastItemInRow","isLastRow","isLastItem","size","width","height","itemProps","key","containerStyle","marginRight","marginBottom","children","renderLastItemOverlay","undefined","dimensionsChangeListener","addDimensionsEventListener","removeDimensionsEventListener","screenWidth","s5","maxItemWidth","containerWidth","lastItemLabel","lastItemOverlayColor","formattedLabel","shouldAddPlus","imageBorderRadius","styles","overlayContainer","backgroundColor","borderRadius","container","nextProps","prevState","displayName","defaultProps","StyleSheet","create","flexDirection","flexWrap","absoluteFillObject","alignItems","justifyContent"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/components/gridView/index.js"],"sourcesContent":["import _map from \"lodash/map\";\nimport _size from \"lodash/size\";\nimport _get from \"lodash/get\";\nimport _first from \"lodash/first\";\nimport _flow from \"lodash/flow\";\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Spacings } from \"../../style\";\n// TODO: we should use asBaseComponent here instead of using UIComponent directly\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../commons/new\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\nconst DEFAULT_NUM_COLUMNS = 3;\nconst DEFAULT_ITEM_SPACINGS = Spacings.s4;\n/**\n * @description: A auto-generated grid view that calculate item size according to given props\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx\n */\nclass GridView extends UIComponent {\n  static displayName = 'GridView';\n  static defaultProps = {\n    numColumns: DEFAULT_NUM_COLUMNS,\n    itemSpacing: DEFAULT_ITEM_SPACINGS\n  };\n  state = {\n    viewWidth: this.getGridContainerWidth(),\n    numColumns: this.calcNumberOfColumns(),\n    itemSize: this.calcItemSize()\n  };\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let viewWidth;\n    let numColumns;\n    if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n      viewWidth = Math.floor(nextProps.viewWidth);\n    }\n    if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n      numColumns = nextProps.numColumns;\n    }\n    if (viewWidth || viewWidth) {\n      return {\n        viewWidth,\n        numColumns\n      };\n    } else {\n      return null;\n    }\n  }\n  componentDidMount() {\n    this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n  }\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n  }\n  onOrientationChanged = () => {\n    const {\n      keepItemSize\n    } = this.props;\n    const {\n      itemSize\n    } = this.state;\n    if (!this.props.viewWidth) {\n      const newItemSize = keepItemSize ? itemSize : this.calcItemSize();\n      this.setState({\n        viewWidth: Math.floor(this.getDefaultViewWidth()),\n        numColumns: this.calcNumberOfColumns(),\n        itemSize: newItemSize\n      });\n    }\n  };\n  getDefaultViewWidth() {\n    return Constants.screenWidth - Spacings.s5 * 2;\n  }\n  getGridContainerWidth() {\n    return Math.floor(this.props.viewWidth || this.getDefaultViewWidth());\n  }\n  calcNumberOfColumns() {\n    const {\n      numColumns,\n      itemSpacing = DEFAULT_ITEM_SPACINGS,\n      maxItemWidth\n    } = this.props;\n    const containerWidth = this.getGridContainerWidth();\n    if (maxItemWidth) {\n      return Math.ceil((containerWidth + itemSpacing) / (maxItemWidth + itemSpacing));\n    } else {\n      return numColumns || DEFAULT_NUM_COLUMNS;\n    }\n  }\n  calcItemSize() {\n    const {\n      itemSpacing = DEFAULT_ITEM_SPACINGS\n    } = this.props;\n    const containerWidth = this.getGridContainerWidth();\n    const numColumns = this.calcNumberOfColumns();\n    return (containerWidth - itemSpacing * (numColumns - 1)) / numColumns;\n  }\n  renderLastItemOverlay() {\n    const {\n      lastItemLabel,\n      items,\n      lastItemOverlayColor\n    } = this.props;\n    const formattedLabel = formatLastItemLabel(lastItemLabel, {\n      shouldAddPlus: true\n    });\n    if (!lastItemLabel) {\n      return;\n    }\n    const imageBorderRadius = _flow(_first, item => _get(item, 'imageProps.borderRadius'))(items);\n    return <View style={[styles.overlayContainer, {\n      backgroundColor: lastItemOverlayColor,\n      borderRadius: imageBorderRadius\n    }]}>\n        <Text mainBold white>\n          {formattedLabel}\n        </Text>\n      </View>;\n  }\n  renderItem = (item, index) => {\n    const {\n      itemSize\n    } = this.state;\n    const {\n      items,\n      itemSpacing,\n      renderCustomItem\n    } = this.props;\n    const {\n      numColumns = DEFAULT_NUM_COLUMNS\n    } = this.state;\n    const itemsCount = _size(items);\n    const rowCount = Math.ceil(itemsCount / numColumns);\n    const isLastItemInRow = (index + 1) % numColumns === 0;\n    const isLastRow = index + 1 > (rowCount - 1) * numColumns;\n    const isLastItem = index === itemsCount - 1;\n    const size = typeof item.itemSize === 'object' ? {\n      width: itemSize,\n      height: item.itemSize?.height || itemSize\n    } : itemSize;\n    const itemProps = {\n      key: index,\n      ...item,\n      itemSize: size,\n      containerStyle: [!isLastItemInRow && {\n        marginRight: itemSpacing\n      }, !isLastRow && {\n        marginBottom: itemSpacing\n      }, item.containerStyle],\n      children: isLastItem ? this.renderLastItemOverlay() : undefined\n    };\n    return renderCustomItem ? renderCustomItem(itemProps) : <GridListItem {...itemProps} />;\n  };\n  render() {\n    const {\n      itemSize\n    } = this.state;\n    const {\n      items,\n      viewWidth\n    } = this.props;\n    return <View style={[styles.container, {\n      width: viewWidth ? Math.floor(viewWidth) : undefined\n    }]}>\n        {itemSize && _map(items, this.renderItem)}\n      </View>;\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default GridView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}