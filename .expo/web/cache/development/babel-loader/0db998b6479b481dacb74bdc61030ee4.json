{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport ExpoDocumentPicker from \"./ExpoDocumentPicker\";\nexport function getDocumentAsync() {\n  return _getDocumentAsync.apply(this, arguments);\n}\nfunction _getDocumentAsync() {\n  _getDocumentAsync = _asyncToGenerator(function* () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? '*/*' : _ref$type,\n      _ref$copyToCacheDirec = _ref.copyToCacheDirectory,\n      copyToCacheDirectory = _ref$copyToCacheDirec === void 0 ? true : _ref$copyToCacheDirec,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n    if (typeof type === 'string') {\n      type = [type];\n    }\n    return yield ExpoDocumentPicker.getDocumentAsync({\n      type: type,\n      copyToCacheDirectory: copyToCacheDirectory,\n      multiple: multiple\n    });\n  });\n  return _getDocumentAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":";AAAA,OAAOA,kBAAkB;AAgBzB,gBAAsBC,gBAAgB;EAAA;AAAA;AASrC;EAAA,sCATM,aAIsB;IAAA,+EAAF,EAAE;MAAA,iBAH3BC,IAAI;MAAJA,IAAI,0BAAG,KAAK;MAAA,6BACZC,oBAAoB;MAApBA,oBAAoB,sCAAG,IAAI;MAAA,qBAC3BC,QAAQ;MAARA,QAAQ,8BAAG,KAAK;IAEhB,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAG,CAACA,IAAI,CAAa;;IAE3B,aAAaF,kBAAkB,CAACC,gBAAgB,CAAC;MAAEC,IAAI,EAAJA,IAAI;MAAEC,oBAAoB,EAApBA,oBAAoB;MAAEC,QAAQ,EAARA;IAAQ,CAAE,CAAC;EAC5F,CAAC;EAAA;AAAA","names":["ExpoDocumentPicker","getDocumentAsync","type","copyToCacheDirectory","multiple"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":["import ExpoDocumentPicker from './ExpoDocumentPicker';\nimport { DocumentPickerOptions, DocumentResult } from './types';\nexport { DocumentPickerOptions, DocumentResult };\n\n// @needsAudit\n/**\n * Display the system UI for choosing a document. By default, the chosen file is copied to [the app's internal cache directory](filesystem.md#filesystemcachedirectory).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * > Therefore, calling `getDocumentAsync` in `componentDidMount`, for example, will **not** work as\n * > intended. The `cancel` event will not be returned in the browser due to platform restrictions and\n * > inconsistencies across browsers.\n *\n * @return On success returns a promise that fulfils with [`DocumentResult`](#documentresult) object.\n *\n * If the user cancelled the document picking, the promise resolves to `{ type: 'cancel' }`.\n */\nexport async function getDocumentAsync({\n  type = '*/*',\n  copyToCacheDirectory = true,\n  multiple = false,\n}: DocumentPickerOptions = {}): Promise<DocumentResult> {\n  if (typeof type === 'string') {\n    type = [type] as string[];\n  }\n  return await ExpoDocumentPicker.getDocumentAsync({ type, copyToCacheDirectory, multiple });\n}\n"]},"metadata":{},"sourceType":"module"}