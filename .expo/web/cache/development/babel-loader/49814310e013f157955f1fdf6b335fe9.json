{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"modifiers\", \"style\", \"disabled\", \"forwardedRef\", \"feedbackColor\", \"activeOpacity\", \"activeScale\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming, interpolate, interpolateColor, runOnJS } from 'react-native-reanimated';\nimport { TapGestureHandler, LongPressGestureHandler } from 'react-native-gesture-handler';\nimport { asBaseComponent, forwardRef } from \"../commons/new\";\nimport View from \"../components/view\";\nimport { Colors } from \"../../src/style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction TouchableOpacity(props) {\n  var children = props.children,\n    modifiers = props.modifiers,\n    style = props.style,\n    disabled = props.disabled,\n    forwardedRef = props.forwardedRef,\n    feedbackColor = props.feedbackColor,\n    _props$activeOpacity = props.activeOpacity,\n    activeOpacity = _props$activeOpacity === void 0 ? 0.2 : _props$activeOpacity,\n    _props$activeScale = props.activeScale,\n    activeScale = _props$activeScale === void 0 ? 1 : _props$activeScale,\n    others = _objectWithoutProperties(props, _excluded);\n  var borderRadius = modifiers.borderRadius,\n    paddings = modifiers.paddings,\n    margins = modifiers.margins,\n    alignments = modifiers.alignments,\n    flexStyle = modifiers.flexStyle;\n  var isActive = useSharedValue(0);\n  var isLongPressed = useSharedValue(false);\n  var backgroundColor = useMemo(function () {\n    return props.backgroundColor || modifiers.backgroundColor || Colors.transparent;\n  }, [props.backgroundColor, modifiers.backgroundColor]);\n  var onPress = useCallback(function () {\n    props.onPress == null ? void 0 : props.onPress(props);\n  }, [props.onPress, props.customValue]);\n  var onLongPress = useCallback(function () {\n    props.onLongPress == null ? void 0 : props.onLongPress(props);\n  }, [props.onLongPress, props.customValue]);\n  var toggleActive = function () {\n    var _f = function _f(value) {\n      isActive.value = withTiming(value, {\n        duration: 200\n      });\n    };\n    _f._closure = {\n      isActive: isActive,\n      withTiming: withTiming\n    };\n    _f.asString = \"function _f(value){const{isActive,withTiming}=jsThis._closure;{isActive.value=withTiming(value,{duration:200});}}\";\n    _f.__workletHash = 10841591471317;\n    _f.__location = \"C:\\\\Users\\\\Alex\\\\Documents\\\\development\\\\Rabbit\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\incubator\\\\TouchableOpacity.js (44:23)\";\n    return _f;\n  }();\n  var tapGestureHandler = useAnimatedGestureHandler({\n    onStart: function () {\n      var _f = function _f() {\n        toggleActive(1);\n      };\n      _f._closure = {\n        toggleActive: toggleActive\n      };\n      _f.asString = \"function _f(){const{toggleActive}=jsThis._closure;{toggleActive(1);}}\";\n      _f.__workletHash = 12689343218764;\n      _f.__location = \"C:\\\\Users\\\\Alex\\\\Documents\\\\development\\\\Rabbit\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\incubator\\\\TouchableOpacity.js (52:13)\";\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f() {\n        toggleActive(0);\n        runOnJS(onPress)();\n      };\n      _f._closure = {\n        toggleActive: toggleActive,\n        runOnJS: runOnJS,\n        onPress: onPress\n      };\n      _f.asString = \"function _f(){const{toggleActive,runOnJS,onPress}=jsThis._closure;{toggleActive(0);runOnJS(onPress)();}}\";\n      _f.__workletHash = 2201219804342;\n      _f.__location = \"C:\\\\Users\\\\Alex\\\\Documents\\\\development\\\\Rabbit\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\incubator\\\\TouchableOpacity.js (55:11)\";\n      return _f;\n    }(),\n    onFail: function () {\n      var _f = function _f() {\n        if (!isLongPressed.value) {\n          toggleActive(0);\n        }\n      };\n      _f._closure = {\n        isLongPressed: isLongPressed,\n        toggleActive: toggleActive\n      };\n      _f.asString = \"function _f(){const{isLongPressed,toggleActive}=jsThis._closure;{if(!isLongPressed.value){toggleActive(0);}}}\";\n      _f.__workletHash = 8040095903981;\n      _f.__location = \"C:\\\\Users\\\\Alex\\\\Documents\\\\development\\\\Rabbit\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\incubator\\\\TouchableOpacity.js (59:12)\";\n      return _f;\n    }()\n  });\n  var longPressGestureHandler = useAnimatedGestureHandler({\n    onActive: function () {\n      var _f = function _f() {\n        if (!isLongPressed.value) {\n          isLongPressed.value = true;\n          runOnJS(onLongPress)();\n        }\n      };\n      _f._closure = {\n        isLongPressed: isLongPressed,\n        runOnJS: runOnJS,\n        onLongPress: onLongPress\n      };\n      _f.asString = \"function _f(){const{isLongPressed,runOnJS,onLongPress}=jsThis._closure;{if(!isLongPressed.value){isLongPressed.value=true;runOnJS(onLongPress)();}}}\";\n      _f.__workletHash = 4829283310259;\n      _f.__location = \"C:\\\\Users\\\\Alex\\\\Documents\\\\development\\\\Rabbit\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\incubator\\\\TouchableOpacity.js (66:14)\";\n      return _f;\n    }(),\n    onFinish: function () {\n      var _f = function _f() {\n        toggleActive(0);\n        isLongPressed.value = false;\n      };\n      _f._closure = {\n        toggleActive: toggleActive,\n        isLongPressed: isLongPressed\n      };\n      _f.asString = \"function _f(){const{toggleActive,isLongPressed}=jsThis._closure;{toggleActive(0);isLongPressed.value=false;}}\";\n      _f.__workletHash = 919923223071;\n      _f.__location = \"C:\\\\Users\\\\Alex\\\\Documents\\\\development\\\\Rabbit\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\incubator\\\\TouchableOpacity.js (72:14)\";\n      return _f;\n    }()\n  });\n  var animatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      var activeColor = feedbackColor || backgroundColor;\n      var opacity = interpolate(isActive.value, [0, 1], [1, activeOpacity]);\n      var scale = interpolate(isActive.value, [0, 1], [1, activeScale]);\n      return {\n        backgroundColor: !feedbackColor ? backgroundColor : interpolateColor(isActive.value, [0, 1], [backgroundColor, activeColor]),\n        opacity: opacity,\n        transform: [{\n          scale: scale\n        }]\n      };\n    };\n    _f._closure = {\n      feedbackColor: feedbackColor,\n      backgroundColor: backgroundColor,\n      interpolate: interpolate,\n      isActive: isActive,\n      activeOpacity: activeOpacity,\n      activeScale: activeScale,\n      interpolateColor: interpolateColor\n    };\n    _f.asString = \"function _f(){const{feedbackColor,backgroundColor,interpolate,isActive,activeOpacity,activeScale,interpolateColor}=jsThis._closure;{const activeColor=feedbackColor||backgroundColor;const opacity=interpolate(isActive.value,[0,1],[1,activeOpacity]);const scale=interpolate(isActive.value,[0,1],[1,activeScale]);return{backgroundColor:!feedbackColor?backgroundColor:interpolateColor(isActive.value,[0,1],[backgroundColor,activeColor]),opacity:opacity,transform:[{scale:scale}]};}}\";\n    _f.__workletHash = 16677049926047;\n    _f.__location = \"C:\\\\Users\\\\Alex\\\\Documents\\\\development\\\\Rabbit\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\incubator\\\\TouchableOpacity.js (77:41)\";\n    _f.__optimalization = 2;\n    return _f;\n  }(), [backgroundColor, feedbackColor]);\n  var Container = props.onLongPress ? LongPressGestureHandler : View;\n  return _jsx(TapGestureHandler, {\n    onGestureEvent: tapGestureHandler,\n    shouldCancelWhenOutside: true,\n    enabled: !disabled,\n    children: _jsx(Reanimated.View, {\n      children: _jsx(Container, {\n        onGestureEvent: longPressGestureHandler,\n        shouldCancelWhenOutside: true,\n        children: _jsx(Reanimated.View, _objectSpread(_objectSpread({}, others), {}, {\n          ref: forwardedRef,\n          style: [borderRadius && {\n            borderRadius: borderRadius\n          }, flexStyle, paddings, margins, alignments, {\n            backgroundColor: backgroundColor\n          }, style, animatedStyle],\n          children: children\n        }))\n      })\n    })\n  });\n}\nTouchableOpacity.displayName = 'Incubator.TouchableOpacity';\nexport default asBaseComponent(forwardRef(TouchableOpacity));","map":{"version":3,"names":["React","useCallback","useMemo","Reanimated","useAnimatedGestureHandler","useAnimatedStyle","useSharedValue","withTiming","interpolate","interpolateColor","runOnJS","TapGestureHandler","LongPressGestureHandler","asBaseComponent","forwardRef","View","Colors","TouchableOpacity","props","children","modifiers","style","disabled","forwardedRef","feedbackColor","activeOpacity","activeScale","others","borderRadius","paddings","margins","alignments","flexStyle","isActive","isLongPressed","backgroundColor","transparent","onPress","customValue","onLongPress","toggleActive","value","duration","tapGestureHandler","onStart","onEnd","onFail","longPressGestureHandler","onActive","onFinish","animatedStyle","activeColor","opacity","scale","transform","Container","displayName"],"sources":["C:/Users/Alex/Documents/development/Rabbit/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming, interpolate, interpolateColor, runOnJS } from 'react-native-reanimated';\nimport { TapGestureHandler, LongPressGestureHandler } from 'react-native-gesture-handler';\nimport { asBaseComponent, forwardRef } from \"../commons/new\";\nimport View from \"../components/view\";\nimport { Colors } from \"../../src/style\";\n/**\n * @description: a Better, enhanced TouchableOpacity component\n * @modifiers: flex, margin, padding, background\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TouchableOpacityScreen.js\n */\nfunction TouchableOpacity(props) {\n  const {\n    children,\n    modifiers,\n    style,\n    disabled,\n    forwardedRef,\n    feedbackColor,\n    activeOpacity = 0.2,\n    activeScale = 1,\n    ...others\n  } = props;\n  const {\n    borderRadius,\n    paddings,\n    margins,\n    alignments,\n    flexStyle\n  } = modifiers;\n  const isActive = useSharedValue(0);\n  /* This flag is for fixing an issue with long press triggering twice\n  TODO: Consider revisiting this issue to see if it still occurs */\n  const isLongPressed = useSharedValue(false);\n  const backgroundColor = useMemo(() => {\n    return props.backgroundColor || modifiers.backgroundColor || Colors.transparent;\n  }, [props.backgroundColor, modifiers.backgroundColor]);\n  const onPress = useCallback(() => {\n    props.onPress?.(props);\n  }, [props.onPress, props.customValue]);\n  const onLongPress = useCallback(() => {\n    props.onLongPress?.(props);\n  }, [props.onLongPress, props.customValue]);\n  const toggleActive = value => {\n    'worklet';\n\n    isActive.value = withTiming(value, {\n      duration: 200\n    });\n  };\n  const tapGestureHandler = useAnimatedGestureHandler({\n    onStart: () => {\n      toggleActive(1);\n    },\n    onEnd: () => {\n      toggleActive(0);\n      runOnJS(onPress)();\n    },\n    onFail: () => {\n      if (!isLongPressed.value) {\n        toggleActive(0);\n      }\n    }\n  });\n  const longPressGestureHandler = useAnimatedGestureHandler({\n    onActive: () => {\n      if (!isLongPressed.value) {\n        isLongPressed.value = true;\n        runOnJS(onLongPress)();\n      }\n    },\n    onFinish: () => {\n      toggleActive(0);\n      isLongPressed.value = false;\n    }\n  });\n  const animatedStyle = useAnimatedStyle(() => {\n    const activeColor = feedbackColor || backgroundColor;\n    const opacity = interpolate(isActive.value, [0, 1], [1, activeOpacity]);\n    const scale = interpolate(isActive.value, [0, 1], [1, activeScale]);\n    return {\n      backgroundColor: !feedbackColor ? backgroundColor : interpolateColor(isActive.value, [0, 1], [backgroundColor, activeColor]),\n      opacity,\n      transform: [{\n        scale\n      }]\n    };\n  }, [backgroundColor, feedbackColor]);\n  const Container = props.onLongPress ? LongPressGestureHandler : View;\n  return <TapGestureHandler\n  // @ts-expect-error\n  onGestureEvent={tapGestureHandler} shouldCancelWhenOutside enabled={!disabled}>\n      <Reanimated.View>\n        {/* @ts-expect-error */}\n        <Container onGestureEvent={longPressGestureHandler} shouldCancelWhenOutside>\n          <Reanimated.View {...others} ref={forwardedRef} style={[borderRadius && {\n          borderRadius\n        }, flexStyle, paddings, margins, alignments, {\n          backgroundColor\n        }, style, animatedStyle]}>\n            {children}\n          </Reanimated.View>\n        </Container>\n      </Reanimated.View>\n    </TapGestureHandler>;\n}\nTouchableOpacity.displayName = 'Incubator.TouchableOpacity';\nexport default asBaseComponent(forwardRef(TouchableOpacity));"],"mappings":"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"},"metadata":{},"sourceType":"module"}